Функция ОпределитьТипСсылки(ТекЗначение, ТекРеквизит = "")

	Попытка
		Переменная = ТекЗначение.Метаданные().ЗаписьДвиженийПриПроведении;
		Возврат "ДокументСсылка."+ТекЗначение.Метаданные().Имя;
	Исключение
	КонецПопытки;
	Попытка
		Переменная = ТекЗначение.Владелец;
		Возврат "СправочникСсылка."+ТекЗначение.Метаданные().Имя;
	Исключение
	КонецПопытки;
	
	Попытка
		Переменная = ТекЗначение.Метаданные().ЗначенияПеречисления;
		Возврат "ПеречислениеСсылка."+ТекЗначение.Метаданные().Имя;
	Исключение
	КонецПопытки;
	Попытка
		Переменная = ТекЗначение.Метаданные().ТекущийИсполнитель;
		Возврат "ЗадачаСсылка."+ТекЗначение.Метаданные().Имя;
	Исключение
	КонецПопытки;
	Попытка
		Переменная = ТекЗначение.Метаданные().Характеристики;
		Возврат "ПланВидовХарактеристикСсылка."+ТекЗначение.Метаданные().Имя;
	Исключение
	КонецПопытки;
	
	Попытка
		Переменная = ТекЗначение.Метаданные().ПризнакиУчетаСубконто;
		Возврат "ПланСчетовСсылка."+ТекЗначение.Метаданные().Имя;
	Исключение
	КонецПопытки;
	Попытка
		Переменная = ТекЗначение.Метаданные().БазовыеВидыРасчета;
		Возврат "ПланВидовРасчетаСсылка."+ТекЗначение.Метаданные().Имя;
	Исключение
	КонецПопытки;
	
	Попытка
		Переменная = ТекЗначение.Стартован;
		Возврат "БизнесПроцессСсылка."+ТекЗначение.Метаданные().Имя;
	Исключение
	КонецПопытки;
	
	Возврат Строка(ТекРеквизит.Тип);

КонецФункции // ТипЗначенияРеквизитаРодитель()

Функция НормализоватьЗначениеJSON(Значение)
	Если ТипЗнч(Значение) = Тип("Строка") ИЛИ
		ТипЗнч(Значение) = Тип("Число") ИЛИ
		ТипЗнч(Значение) = Тип("Булево") ИЛИ
		ТипЗнч(Значение) = Тип("Дата")	Тогда
		Возврат Значение;
	Иначе	
		Возврат Строка(Значение);
	КонецЕсли;
КонецФункции // НормализоватьЗначение()

Процедура ВставитьЗначениеСтруктуры(Структура, Ключ, Значение, ТипЗначения = "")

	Если ТипЗначения = "" Тогда
	
		Структура.Вставить(Ключ, НормализоватьЗначениеJSON(Значение));
		
	ИначеЕсли ТипЗначения = "Структура" Тогда	
		
		М = Новый Массив();
		М.Добавить(Значение);
		Структура.Вставить(Ключ, М);
		
	Иначе
		
		М = Новый Массив();
		С = Новый Структура();
		С.Вставить("_TypeOf", ТипЗначения);
		С.Вставить("value", НормализоватьЗначениеJSON(Значение));
		М.Добавить(С);
		Структура.Вставить(Ключ, М);
	
	КонецЕсли;
	
	

КонецПроцедуры

Функция ОбъектВСтруктуру(ЗначениеСсылка, КоллекцияТипа, ТолькоСсылка = Ложь)	

	Данные = Новый Структура();
	
	Мета = ЗначениеСсылка.Метаданные();
	
	Если Найти(КоллекцияТипа, "ПеречислениеСсылка") Тогда
		Данные.Вставить("Ссылка", ПолучитьПолноеИмяПредопределенногоЗначения(ЗначениеСсылка));
	Иначе
		
		Данные.Вставить("Ссылка", Строка(ЗначениеСсылка.УникальныйИдентификатор()));	
	КонецЕсли;
	Данные.Вставить("Тип", КоллекцияТипа + "." + Мета.Имя);
	Данные.Вставить("Представление", Строка(ЗначениеСсылка));
	Если Найти(КоллекцияТипа, "СправочникСсылка") Тогда
		Данные.Вставить("Наименование", ЗначениеСсылка.Наименование);
		Данные.Вставить("Код", ЗначениеСсылка.Код);
	КонецЕсли;
	
	Если Найти(КоллекцияТипа, "ДокументСсылка") Тогда
		Данные.Вставить("Дата", ЗначениеСсылка.Дата);
		Данные.Вставить("Номер", ЗначениеСсылка.Номер);
	КонецЕсли;
	
	Если ТолькоСсылка Тогда
		Возврат Данные;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеСсылка) и Найти(КоллекцияТипа, "ПеречислениеСсылка") = 0 Тогда
		ВыгрузитьСтандартныеРеквизиты(Мета, ЗначениеСсылка, Данные);
		ВыгрузитьРеквизиты(Мета, ЗначениеСсылка, Данные, КоллекцияТипа);
		ВыгрузитьТабличныеЧасти(Мета, ЗначениеСсылка, Данные, КоллекцияТипа);
		Если Найти(КоллекцияТипа, "ДокументСсылка") Тогда
			ВыгрузитьДвижения(Мета, ЗначениеСсылка, Данные, КоллекцияТипа);
		КонецЕсли;
	КонецЕсли;	
	
	Возврат Данные;

КонецФункции // ОбъектВСтруктуру()

Функция ВыгрузитьСтандартныеРеквизиты(Мета, ЗначениеСсылка, Данные)
	СтандартныеРеквизиты = Новый Структура;
	Для Каждого Реквизит Из Мета.СтандартныеРеквизиты Цикл
		Если Реквизит.Имя = "Ссылка" Тогда
			Продолжить;
		КонецЕсли;		
		Если Реквизит.Имя = "Порядок" Тогда
			Продолжить;
		КонецЕсли;
		Если Реквизит.Имя = "ИмяПредопределенныхДанных" Тогда
			Продолжить;
		КонецЕсли;
		СтандартныеРеквизиты.Вставить(Реквизит.Имя, ЗначениеВJSON(ЗначениеСсылка[Реквизит.Имя], Истина));	
	КонецЦикла;
	Данные.Вставить("СтандартныеРеквизиты", СтандартныеРеквизиты);
КонецФункции

Функция ВыгрузитьРеквизиты(Мета, ЗначениеСсылка, Данные, КоллекцияТипа);
	Реквизиты = Новый Структура;
	Для Каждого Реквизит Из Мета.Реквизиты Цикл
		Если Найти(КоллекцияТипа, "СправочникСсылка") Тогда
			Использование = Строка(Реквизит.Использование);
			Если ЗначениеСсылка.ЭтоГруппа Тогда
				Если Использование = "ДляГруппы" или Использование = "ДляГруппыИЭлемента" Тогда
					Реквизиты.Вставить(Реквизит.Имя, ЭлементВПростыеТипы(ЗначениеСсылка[Реквизит.Имя], Истина));
				КонецЕсли;
			Иначе
				Реквизиты.Вставить(Реквизит.Имя, ЭлементВПростыеТипы(ЗначениеСсылка[Реквизит.Имя], Истина));	
			КонецЕсли;
		Иначе
			Реквизиты.Вставить(Реквизит.Имя, ЭлементВПростыеТипы(ЗначениеСсылка[Реквизит.Имя], Истина));
		КонецЕсли;
	КонецЦикла;
	Данные.Вставить("Реквизиты", Реквизиты);
КонецФункции

Функция ВыгрузитьТабличныеЧасти(Мета, ЗначениеСсылка, Данные, КоллекцияТипа)
	стрТЧ = Новый Структура;
	Для Каждого МетаТЧ Из Мета.ТабличныеЧасти Цикл
		//Использование = Строка(МетаТЧ.Использование);
		//Если ЗначениеСсылка.ЭтоГруппа и Использование = "ДляЭлемента" Тогда			
		//	Продолжить;
		//КонецЕсли;
		ДанныеТЧ = Новый Массив;
		Реквизиты = Мета.ТабличныеЧасти[МетаТЧ.Имя].Реквизиты;
		
		ТЧ = ЗначениеСсылка[МетаТЧ.Имя];
		Если ТЧ.Количество() Тогда
			Для Каждого Строка Из Тч Цикл
				НоваяСтрока = Новый Структура;
				Для Каждого Реквизит Из Реквизиты Цикл			
					НоваяСтрока.Вставить(Реквизит.Имя, ЭлементВПростыеТипы(Строка[Реквизит.Имя], Истина));
				КонецЦикла;	
				ДанныеТЧ.Добавить(НоваяСтрока);
			КонецЦикла;
		КонецЕсли;
		стрТЧ.Вставить(МетаТЧ.Имя, ДанныеТЧ);
	КонецЦикла;
	Данные.Вставить("ТЧ", стрТЧ);
КонецФункции

Функция ВыгрузитьДвижения(Мета, ЗначениеСсылка, Данные, КоллекцияТипа)	
	стрДвижения = Новый Структура;
	Для Каждого Регистр Из Мета.Движения Цикл
		ИмяРегистра = Регистр.Имя;
		ДанныеДвижения = Новый Структура;
		Если Не Метаданные.РегистрыБухгалтерии.Найти(ИмяРегистра) = Неопределено Тогда			
			НаборЗаписей = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
			ИмяРегистра = "РегистрБухгалтерии" + Регистр.Имя;
			НаборЗаписей.Отбор.Регистратор.Установить(ЗначениеСсылка);
			НаборЗаписей.Прочитать();			
		ИначеЕсли Не Метаданные.РегистрыНакопления.Найти(ИмяРегистра) = Неопределено Тогда			
			НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			ИмяРегистра = "РегистрНакопления" + Регистр.Имя;
			НаборЗаписей.Отбор.Регистратор.Установить(ЗначениеСсылка);
			НаборЗаписей.Прочитать();			
		ИначеЕсли Не Метаданные.РегистрыСведений.Найти(ИмяРегистра) = Неопределено Тогда			
			НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			ИмяРегистра = "РегистрСведений" + Регистр.Имя;
			НаборЗаписей.Отбор.Регистратор.Установить(ЗначениеСсылка);
			НаборЗаписей.Прочитать();						
		КонецЕсли;
		Таблица = НаборЗаписей.Выгрузить();
		Если Таблица.Количество() = 0 Тогда
			стрДвижения.Вставить(ИмяРегистра, Новый Массив);	
		Иначе
			Таблица.ЗаполнитьЗначения(Неопределено, "Регистратор");
			стрДвижения.Вставить(ИмяРегистра, ДанныеВПростыеТипыРекурсивно(Таблица, Истина));
		КонецЕсли;		
	КонецЦикла;
	Данные.Вставить("Движения", стрДвижения);
КонецФункции

Функция ДанныеВJSON(Данные, ТолькоСсылки = Истина, БезПроверки = Ложь) Экспорт
	
	Если БезПроверки Тогда
		ПреобразоватьВJSON(Данные);
	Иначе
		Возврат ПреобразоватьВJSON(ДанныеВПростыеТипыРекурсивно(Данные, ТолькоСсылки));
	КонецЕсли;
	
КонецФункции // СтруктураВJSON()

Функция ДанныеВJSONРекурсивно(Данные, ТолькоСсылки)
	
	ЭтоМассив = Ложь;
	ЭтоТаблица = Ложь;
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ПреобразованныеДанные = Новый Структура();
	ИначеЕсли ТипЗнч(Данные) = Тип("Массив") Тогда
		ПреобразованныеДанные = Новый Массив;
		ЭтоМассив = Истина;	
	ИначеЕсли ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
		ПреобразованныеДанные = Новый Массив;
		ЭтоТаблица = Истина;
	Иначе
		Возврат ЗначениеВJSON(Данные, ТолькоСсылки);
	КонецЕсли;
	
	Если ЭтоТаблица Тогда
		Если Данные.Количество() = 0 Тогда				
		Иначе
			СтруктураСтроки = "";
			Для Каждого Колонка Из Данные.Колонки Цикл
				СтруктураСтроки = СтруктураСтроки + Колонка.Имя + ",";
			КонецЦикла;
			СтруктураСтроки = Лев(СтруктураСтроки, СтрДлина(СтруктураСтроки)-1);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Элемент Из Данные Цикл				
		Если ЭтоМассив Тогда
			НовоеЗначение = ЗначениеВJSON(Элемент, ТолькоСсылки);
			ПреобразованныеДанные.Добавить(НовоеЗначение);
		ИначеЕсли ЭтоТаблица Тогда		
			СтрокаСтруктурой = Новый Структура(СтруктураСтроки);
			ЗаполнитьЗначенияСвойств(СтрокаСтруктурой, Элемент);					
			ПреобразованныеДанные.Добавить(ЗначениеВJSON(СтрокаСтруктурой, ТолькоСсылки));
		Иначе
			НовоеЗначение = ЗначениеВJSON(Элемент.Значение, ТолькоСсылки);
			ПреобразованныеДанные.Вставить(Элемент.Ключ, НовоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПреобразованныеДанные;
	
КонецФункции // СтруктураВJSON()

Функция ЗначениеВJSON(Элемент, ТолькоСсылка = Ложь)
	
	Если ТипЗнч(Элемент) = Тип("Число") ИЛИ
		 ТипЗнч(Элемент) = Тип("Булево") ИЛИ			 
		 ТипЗнч(Элемент) = Тип("Дата")	
	Тогда
		НовоеЗначение = Элемент;
	ИначеЕсли ТипЗнч(Элемент) = Тип("Строка") Тогда
		НовоеЗначение = Элемент;
	ИначеЕсли ТипЗнч(Элемент) = Тип("null") Тогда
		НовоеЗначение = "";
	ИначеЕсли ТипЗнч(Элемент) = Тип("УникальныйИдентификатор") Тогда
		НовоеЗначение = Строка(Элемент);
	ИначеЕсли ТипЗнч(Элемент) = Тип("Неопределено") Тогда
		НовоеЗначение = "";
	ИначеЕсли ТипЗнч(Элемент) = Тип("Структура") Тогда	
		НовоеЗначение = Новый Структура;
		Для Каждого ВложенныйЭлемент Из Элемент Цикл
			НовоеЗначение.Вставить(ВложенныйЭлемент.Ключ, ДанныеВПростыеТипыРекурсивно(ВложенныйЭлемент.Значение, ТолькоСсылка));
		КонецЦикла;
	ИначеЕсли ТипЗнч(Элемент) = Тип("Массив") Тогда	
		НовоеЗначение = Новый Массив;
		Для Каждого ВложенныйЭлемент Из Элемент Цикл
			НовоеЗначение.Добавить(ДанныеВПростыеТипыРекурсивно(ВложенныйЭлемент, ТолькоСсылка));
		КонецЦикла;
	ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаЗначений") Тогда	
		НовоеЗначение = ДанныеВПростыеТипыРекурсивно(Элемент, ТолькоСсылка);
	Иначе
		НовоеЗначение = Объект1сВJSON(Элемент, ТолькоСсылка);
	КонецЕсли;
	
	Возврат НовоеЗначение;
	
КонецФункции // СтруктураВJSON()

Функция Объект1сВJSON(Элемент, ТолькоСсылка = Ложь, ВключаяДвижения = Ложь) Экспорт	
	
	ТипЭлемента = ТипЗнч(Элемент);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЭлемента) Тогда	
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"СправочникСсылка", ТолькоСсылка);
	ИначеЕсли Найти(ТипЭлемента, "Справочник объект") Тогда
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"СправочникСсылка", ТолькоСсылка);
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЭлемента) Тогда	
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"ДокументСсылка", ТолькоСсылка);
	ИначеЕсли Найти(ТипЭлемента, "Документ объект") Тогда
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"ДокументСсылка", ТолькоСсылка);	
		
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЭлемента) Тогда
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПеречислениеСсылка", ТолькоСсылка);
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЭлемента) Тогда
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПеречислениеСсылка", ТолькоСсылка);
		
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЭлемента) Тогда
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПланВидовХарактеристикСсылка", ТолькоСсылка);
	ИначеЕсли Найти(ТипЭлемента, "План видов характеристик объект") Тогда
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПланВидовХарактеристикСсылка", ТолькоСсылка);
		
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЭлемента) Тогда
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПланСчетовСсылка", ТолькоСсылка);
	ИначеЕсли Найти(ТипЭлемента, "План счетов объект") Тогда
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПланСчетовСсылка", ТолькоСсылка);
		
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЭлемента) Тогда
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПланВидовРасчетаСсылка", ТолькоСсылка);
	ИначеЕсли Найти(ТипЭлемента, "План видов расчетов объект") Тогда
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПланВидовРасчетаСсылка", ТолькоСсылка);
		
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЭлемента) Тогда
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"БизнесПроцессСсылка", ТолькоСсылка);
	ИначеЕсли Найти(ТипЭлемента, "Бизнес-процесс объект") Тогда		
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"БизнесПроцессСсылка", ТолькоСсылка);
		
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипЭлемента) Тогда
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"ЗадачаСсылка", ТолькоСсылка);
	ИначеЕсли Найти(ТипЭлемента, "Задача объект") Тогда
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"ЗадачаСсылка", ТолькоСсылка);
		
	ИначеЕсли Найти(ТипЭлемента, "Регистр сведений") Тогда
		НовоеЗначение = ВыгрузитьНаборЗаписей(Элемент, "РегистрСведенийНаборЗаписей");
		
	ИначеЕсли Найти(ТипЭлемента, "Регистр накопления") Тогда	
		НовоеЗначение = ВыгрузитьНаборЗаписей(Элемент, "РегистрНакопленияНаборЗаписей");
		
	ИначеЕсли Найти(ТипЭлемента, "Регистр бухгалтерии") Тогда	
		НовоеЗначение = ВыгрузитьНаборЗаписей(Элемент, "РегистрБухгалтерииНаборЗаписей");
	Иначе
		НовоеЗначение = Новый Структура("СложныйТип, Тип, Представление", Истина, Строка(ТипЭлемента), Строка(Элемент));
	КонецЕсли;
	
	Возврат НовоеЗначение;
КонецФункции

Функция ВыгрузитьНаборЗаписей(Источник, КоллекцияТипа)
	Мета = Источник.Метаданные();
	Данные = ДанныеВПростыеТипыРекурсивно(Источник.Выгрузить(),Истина);
	
	ДанныеНабора = Новый Структура("Тип, Отбор, НаборЗаписей");
	ДанныеНабора.Вставить("Тип", КоллекцияТипа + "." + Мета.Имя);
	ДанныеНабора.Вставить("НаборЗаписей", Данные);
	
	Отбор = Новый Массив;
	Для Каждого ЭлементОтбора Из Источник.Отбор Цикл
		СтруктураОтбора = Новый Структура("Имя, ВидСравнения, Значение");
		СтруктураОтбора.Вставить("Имя",          ЭлементОтбора.Имя);
		СтруктураОтбора.Вставить("ВидСравнения", Строка(ЭлементОтбора.ВидСравнения));
		СтруктураОтбора.Вставить("Значение",     ЗначениеВJSON(ЭлементОтбора.Значение, Истина));
		
		Отбор.Добавить(СтруктураОтбора);
	КонецЦикла;
	ДанныеНабора.Вставить("Отбор", Отбор);
	Возврат ДанныеНабора;
КонецФункции

Функция Объект1сВJSON_РИБ(ВходящиеДанные) Экспорт
	ИмяФайла = ПолучитьИмяВременногоФайла();	
	
	Запись = Новый ЗаписьJSON;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(, Символы.ВТаб);
	Запись.ОткрытьФайл(ИмяФайла,,,ПараметрыЗаписи);
		
	СериализаторXDTO.ЗаписатьJSON(Запись, ВходящиеДанные, НазначениеТипаXML.Явное);
	
	Запись.Закрыть();
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяФайла);
	
	ИсходящиеДанные = Текст.ПолучитьТекст();
	
	Текст = Неопределено;
	
	УдалитьФайлы(ИмяФайла);
	
	Возврат ИсходящиеДанные;
КонецФункции

Функция Объект1сИзJSON_РИБ(Источник) Экспорт
	
КонецФункции

Функция ПреобразоватьВJSON(Данные)
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб,,,,,Истина);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписатьJSON(ЗаписьJSON, Данные, НастройкиСериализацииJSON);
	
	ТекстСообщения = ЗаписьJSON.Закрыть();
	
	Возврат ТекстСообщения;	
КонецФункции

Функция ДанныеИзJSON(СтрокаJSON, ИменаПолейСДатами = "date") Экспорт

	СтруктураJSON = Неопределено;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Попытка
		СтруктураJSON = ПрочитатьJSON(ЧтениеJSON, Ложь, ИменаПолейСДатами, ФорматДатыJSON.ISO);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Возврат СтруктураJSON;
	
КонецФункции // СтруктураВJSON()

Функция ДатаИзJSON(СтрокаJSON, ФорматДаты = "") Экспорт

	ФорматДаты = ?(ФорматДаты = "",ФорматДатыJSON.ISO,ФорматДаты);
	Дата1С = Неопределено;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку("{
	|""date"": """+СтрокаJSON+"""
	|}");
	Попытка
		Дата1С = ПрочитатьJSON(ЧтениеJSON, Ложь, "date", ФорматДаты).date;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Возврат Дата1С;
	
КонецФункции // СтруктураВJSON()

Функция УдалитьСлужебныеСимволы(Строка)
	
	НоваяСтрока = СтрЗаменить(Строка, """", """");
	//НоваяСтрока = СтрЗаменить(Строка, """", "&#34");
	Возврат НоваяСтрока;
	
КонецФункции

Функция ПолучитьДатуИзСтроки(Строка) Экспорт
	Год     = Сред(Строка, 1, 4);
	Месяц   = Сред(Строка, 6, 2);
	День    = Сред(Строка, 9, 2);
	Час     = Сред(Строка, 12, 2);
	Минута  = Сред(Строка, 15, 2);
	Секунда = Сред(Строка, 18, 2);
	Возврат Дата(Год, Месяц, День, Час, Минута, Секунда);
КонецФункции

Функция ПолучитьПараметрыПреобразованияJSONПоУмолчанию()
	
	ПараметрыПреобразованияПоУмолчанию = Новый Структура;
	ПараметрыПреобразованияПоУмолчанию.Вставить("ПрочитатьВСоответствие", Истина);
	ПараметрыПреобразованияПоУмолчанию.Вставить("ФорматДатыJSON", ФорматДатыJSON.ISO);
	ПараметрыПреобразованияПоУмолчанию.Вставить("ИменаСвойствСоЗначениямиДата", Неопределено);
	
	Возврат ПараметрыПреобразованияПоУмолчанию;
	
КонецФункции

Функция ПолучитьПараметрыЗаписиJSONПоУмолчанию()
	
	ПараметрыЗаписиJSONПоУмолчанию = Новый Структура;
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ПереносСтрок", ПереносСтрокJSON.Авто);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("СимволыОтступа", " ");
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ИспользоватьДвойныеКавычки", Истина);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ЭкранированиеСимволов", ЭкранированиеСимволовJSON.СимволыВнеASCII);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ЭкранироватьУгловыеСкобки", Истина);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ЭкранироватьРазделителиСтрок", Истина);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ЭкранироватьАмперсанд", Истина);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ЭкранироватьОдинарныеКавычки", Истина);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ЭкранироватьСлеш", Истина);
	
	Возврат ПараметрыЗаписиJSONПоУмолчанию;
	
КонецФункции
Функция ВыгрузитьСсылкиПоОбъекту(ЗначениеСсылка, Данные)
	Мета = ЗначениеСсылка.Метаданные();
	Префикс = ПараметрыСеанса.ПрефиксУзлаРаспределеннойИнформационнойБазы;
	
	Для Каждого Реквизит Из Мета.Реквизиты Цикл
		Значение = ЗначениеСсылка[Реквизит.Имя];
		Если Не ЗначениеЗаполнено(Значение) Тогда
			Продолжить;
		КонецЕсли;
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
			Данные.Добавить(Объект1сВПростыеТипы(Значение));
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
			Данные.Добавить(Объект1сВПростыеТипы(Значение));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого МетаТЧ Из Мета.ТабличныеЧасти Цикл
		Реквизиты = Мета.ТабличныеЧасти[МетаТЧ.Имя].Реквизиты;
		
		ТЧ = ЗначениеСсылка[МетаТЧ.Имя];		
		Если ТЧ.Количество() Тогда
			Для Каждого Строка Из Тч Цикл				
				Для Каждого Реквизит Из Реквизиты Цикл
					Значение = Строка[Реквизит.Имя];
					Если Не ЗначениеЗаполнено(Значение) Тогда
						Продолжить;
					КонецЕсли;
					Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
						Данные.Добавить(Объект1сВПростыеТипы(Значение));
					ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
						Данные.Добавить(Объект1сВПростыеТипы(Значение));
					КонецЕсли;
				КонецЦикла;	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
КонецФункции

Функция ИмяСобытияОбмен() Экспорт
	Возврат "Exchange API";
КонецФункции

Функция ВосстановитьОбъект1сИзСтруктуры(ВходящиеДанные) Экспорт
	Если Не ТипЗнч(ВходящиеДанные) = Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	Тип = ВходящиеДанные.Тип;
	
	Если Найти(Тип, "ПланВидовХарактеристик") Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	Если Найти(Тип, "ПланСчетовСсылка") Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ИмяТипа = СтрРазделить(Тип,".")[1];
	Если Найти(Тип, "СправочникСсылка") Тогда
		Если ВходящиеДанные.Свойство("ИмяПредопределенныхДанных") 
			и ЗначениеЗаполнено(ВходящиеДанные.ИмяПредопределенныхДанных)
		Тогда
			Попытка // не всегда предопределенный элемент есть в данных БД
				Возврат Справочники[ИмяТипа][ВходящиеДанные.ИмяПредопределенныхДанных];
			Исключение
			КонецПопытки;
		КонецЕсли;	
	КонецЕсли;
		
	Ссылка = НайтиПоРеквизитамИзСтруктуры(ВходящиеДанные, ИмяТипа);
	//Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ВходящиеДанные.Ссылка));
	Попытка
		Если Не Ссылка = Неопределено Тогда
			Объект1с = Ссылка.ПолучитьОбъект();
		КонецЕсли;
	Исключение
		
	КонецПопытки;
	
	Если Объект1с = Неопределено Тогда
		Если Найти(Тип, "СправочникСсылка") Тогда
			Если ВходящиеДанные.СтандартныеРеквизиты.Свойство("ЭтоГруппа")
				и ВходящиеДанные.СтандартныеРеквизиты.ЭтоГруппа Тогда
				Объект1с = Справочники[ИмяТипа].СоздатьГруппу();
			Иначе
				Объект1с = Справочники[ИмяТипа].СоздатьЭлемент();
			КонецЕсли;
		ИначеЕсли Найти(Тип, "ДокументСсылка") Тогда
			// todo
			Попытка
				Объект1с = Документы[ИмяТипа].СоздатьДокумент();
			Исключение
			КонецПопытки;
		ИначеЕсли Найти(Тип, "ПланСчетовСсылка") Тогда
			Объект1с = ПланыСчетов[ИмяТипа].СоздатьСчет();
		Иначе
			Возврат Неопределено;
		КонецЕсли;		
		//Объект1с.УстановитьСсылкуНового(Ссылка);	
	КонецЕсли;
		
	Если ВходящиеДанные.Свойство("Реквизиты") Тогда
		ЗаполнитьСсылки(ВходящиеДанные.Реквизиты);	
		ЗаполнитьЗначенияСвойств(Объект1с, ВходящиеДанные.Реквизиты);
	КонецЕсли;
	
	Если ВходящиеДанные.Свойство("СтандартныеРеквизиты") Тогда
		ЗаполнитьСсылки(ВходящиеДанные.СтандартныеРеквизиты);	
		Попытка
			ЗаполнитьЗначенияСвойств(Объект1с, ВходящиеДанные.СтандартныеРеквизиты);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			леЛоггирование.СообщитьОбОшибке(ОписаниеОшибки);
			ВызватьИсключение ОписаниеОшибки;
		КонецПопытки;
	КонецЕсли;
		
	Если Найти(Тип, "СправочникСсылка") Тогда
		Если ВходящиеДанные.СтандартныеРеквизиты.Свойство("ЭтоГруппа")
			и ВходящиеДанные.СтандартныеРеквизиты.ЭтоГруппа Тогда			
		Иначе
			Попытка
				ЗаполнитьЗначенияСвойств(Объект1с, ВходящиеДанные.Реквизиты);
			Исключение
			КонецПопытки;
		КонецЕсли;
	Иначе
		ЗаполнитьЗначенияСвойств(Объект1с, ВходящиеДанные.Реквизиты);
	КонецЕсли;
	
	Объект1с.ОбменДанными.Загрузка = Истина;
	Объект1с.Записать();
	Объект1с.ОбменДанными.Загрузка = Ложь;
	
	Если ВходящиеДанные.Свойство("ТЧ") Тогда
		Для Каждого ТЧ Из ВходящиеДанные.ТЧ Цикл
			Попытка
				Объект1с[ТЧ.Ключ].Очистить();
				Для Каждого Строка Из ТЧ.Значение Цикл
					ЗаполнитьСсылки(Строка);	
					НоваяСтрока = Объект1с[ТЧ.Ключ].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				КонецЦикла;
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Если ВходящиеДанные.Свойство("НаборЗаписей") Тогда
		Для Каждого Элемент Из ВходящиеДанные.Отбор Цикл
			Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
				ИмяТипа = СтрРазделить(Элемент.Значение.Тип,".")[1];			
				Значение = НайтиПоРеквизитамИзСтруктуры(Элемент.Значение, ИмяТипа);
			Иначе
				Значение = Элемент.Значение;
				Если Сред(Значение, "11", 1) = "T" Тогда
					Значение = леРаботаСJSON.ДатаИзJSON(Значение);
				КонецЕсли;
			КонецЕсли;
						
			Объект1с.Отбор[Элемент.Имя].Установить(Значение);
		КонецЦикла;
		
		Объект1с.Прочитать();
		Объект1с.Очистить();
		Для Каждого Запись Из ВходящиеДанные.НаборЗаписей Цикл
			НоваяСтрока = Объект1с.Добавить();
			ЗаполнитьСсылки(Запись);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
			
			Если Найти(Тип, "Бухгалтерии") Тогда
				Если ЗначениеЗаполнено(Запись.СубконтоДТ1) Тогда
					НоваяСтрока.СубконтоДТ.Вставить(Запись.ВидСубконтоДт1, Запись.СубконтоДТ1);
				КонецЕсли;
				Если ЗначениеЗаполнено(Запись.СубконтоДТ2) Тогда
					НоваяСтрока.СубконтоДТ.Вставить(Запись.ВидСубконтоДт2, Запись.СубконтоДТ2);
				КонецЕсли;
				Если ЗначениеЗаполнено(Запись.СубконтоДТ3) Тогда
					НоваяСтрока.СубконтоДТ.Вставить(Запись.ВидСубконтоДт3, Запись.СубконтоДТ3);
				КонецЕсли;
				Если ЗначениеЗаполнено(Запись.СубконтоКТ1) Тогда
					НоваяСтрока.СубконтоКТ.Вставить(Запись.ВидСубконтоКт1, Запись.СубконтоКТ1);
				КонецЕсли;
				Если ЗначениеЗаполнено(Запись.СубконтоКТ2) Тогда
					НоваяСтрока.СубконтоКТ.Вставить(Запись.ВидСубконтоКт2, Запись.СубконтоКТ2);
				КонецЕсли;
				Если ЗначениеЗаполнено(Запись.СубконтоКТ3) Тогда
					НоваяСтрока.СубконтоКТ.Вставить(Запись.ВидСубконтоКт3, Запись.СубконтоКТ3);
				КонецЕсли;
			ИначеЕсли Найти(Тип, "Накопления") Тогда
				Если Запись.Свойство("ВидДвижения") Тогда
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Объект1с.ДополнительныеСвойства.Вставить("НеЗапускатьОбмен", Истина);
	
	Если ВходящиеДанные.Свойство("Движения") Тогда
		Для Каждого стрНаборЗаписей из ВходящиеДанные.Движения Цикл
			Если Найти(стрНаборЗаписей.Ключ, "Бухгалтерии") Тогда
				ИмяРегистра = СтрЗаменить(стрНаборЗаписей .Ключ, "РегистрБухгалтерии", "");
				Движения = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
				Движения.Отбор.Регистратор.Установить(Объект1с.Ссылка);
				Для Каждого Запись Из стрНаборЗаписей.Значение Цикл
					НоваяСтрока = Движения.Добавить();
					ЗаполнитьСсылки(Запись);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
					Если ЗначениеЗаполнено(Запись.СубконтоДТ1) Тогда
						НоваяСтрока.СубконтоДТ.Вставить(Запись.ВидСубконтоДт1, Запись.СубконтоДТ1);
					КонецЕсли;
					Если ЗначениеЗаполнено(Запись.СубконтоДТ2) Тогда
						НоваяСтрока.СубконтоДТ.Вставить(Запись.ВидСубконтоДт2, Запись.СубконтоДТ2);
					КонецЕсли;
					Если ЗначениеЗаполнено(Запись.СубконтоДТ3) Тогда
						НоваяСтрока.СубконтоДТ.Вставить(Запись.ВидСубконтоДт3, Запись.СубконтоДТ3);
					КонецЕсли;
					Если ЗначениеЗаполнено(Запись.СубконтоКТ1) Тогда
						НоваяСтрока.СубконтоКТ.Вставить(Запись.ВидСубконтоКт1, Запись.СубконтоКТ1);
					КонецЕсли;
					Если ЗначениеЗаполнено(Запись.СубконтоКТ2) Тогда
						НоваяСтрока.СубконтоКТ.Вставить(Запись.ВидСубконтоКт2, Запись.СубконтоКТ2);
					КонецЕсли;
					Если ЗначениеЗаполнено(Запись.СубконтоКТ3) Тогда
						НоваяСтрока.СубконтоКТ.Вставить(Запись.ВидСубконтоКт3, Запись.СубконтоКТ3);
					КонецЕсли;
					НоваяСтрока.Регистратор = Объект1с.Ссылка;
					НоваяСтрока.Активность  = Истина; 
				КонецЦикла;
				Попытка
					Движения.Записать();
				Исключение
					леЛоггирование.СообщитьОбОшибке(ОписаниеОшибки());
				КонецПопытки;
			ИначеЕсли Найти(стрНаборЗаписей .Ключ, "Накопления") Тогда
				ИмяРегистра = СтрЗаменить(стрНаборЗаписей.Ключ, "РегистрНакопления", "");
				Движения = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
				Движения.Отбор.Регистратор.Установить(Объект1с.Ссылка);
				Для Каждого Запись Из стрНаборЗаписей.Значение Цикл
					НоваяСтрока = Движения.Добавить();
					ЗаполнитьСсылки(Запись);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
					НоваяСтрока.Регистратор = Объект1с.Ссылка;
				КонецЦикла;
				Попытка
					Движения.Записать();
				Исключение
					леЛоггирование.СообщитьОбОшибке(ОписаниеОшибки());
				КонецПопытки;
			ИначеЕсли Найти(стрНаборЗаписей .Ключ, "Сведений") Тогда
				ИмяРегистра = СтрЗаменить(стрНаборЗаписей.Ключ, "РегистрСведений", "");
				Движения = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
				Движения.Отбор.Регистратор.Установить(Объект1с.Ссылка);
				Для Каждого Запись Из стрНаборЗаписей.Значение Цикл
					НоваяСтрока = Движения.Добавить();
					ЗаполнитьСсылки(Запись);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
					НоваяСтрока.Регистратор = Объект1с.Ссылка;
				КонецЦикла;
				Попытка
					Движения.Записать();
				Исключение
					леЛоггирование.СообщитьОбОшибке(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТипВхДанных = Неопределено;
	
	Если Найти(Тип, "СправочникСсылка") Тогда
		Мета = Объект1с.Ссылка.Метаданные();
		Если ВходящиеДанные.Свойство("Код") и Мета.ДлинаКода > 0 Тогда
			Объект1с.Код = ВходящиеДанные.Код;
		КонецЕсли;
		Если ВходящиеДанные.Свойство("Наименование") и Мета.ДлинаНаименования > 0 Тогда
			Объект1с.Наименование = ВходящиеДанные.Наименование;
		КонецЕсли;
		Если ВходящиеДанные.Свойство("Владелец") и Мета.Владельцы.Количество() Тогда
			Если ЗначениеЗаполнено(ВходящиеДанные.Владелец) Тогда
				ДанныеТипа = СтрРазделить(ВходящиеДанные.Владелец.Тип, ".");
				Объект1с.Владелец = НайтиПоРеквизитамИзСтруктуры(ВходящиеДанные.Владелец, ДанныеТипа[1]);
			Иначе
				Объект1с.Владелец = Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если ВходящиеДанные.Свойство("Родитель") и Мета.Иерархический Тогда
			Если ЗначениеЗаполнено(Объект1с.Родитель) Тогда
				ДанныеТипа = СтрРазделить(ВходящиеДанные.Родитель.Тип, ".");
				Объект1с.Родитель = НайтиПоРеквизитамИзСтруктуры(ВходящиеДанные.Родитель, ДанныеТипа[1]);
			Иначе
				Объект1с.Родитель = Неопределено;
			КонецЕсли;
		КонецЕсли;
		ТипВхДанных = "Справочник";
	ИначеЕсли Найти(Тип, "ДокументСсылка") Тогда		
		ДокументПроведен  = Объект1с.Проведен;
		Объект1с.Дата     = ВходящиеДанные.СтандартныеРеквизиты.Дата;
		Объект1с.Проведен = ВходящиеДанные.СтандартныеРеквизиты.Проведен;
		Объект1с.Номер    = ВходящиеДанные.СтандартныеРеквизиты.Номер;
		Объект1с.ПометкаУдаления = ВходящиеДанные.СтандартныеРеквизиты.ПометкаУдаления;
		ТипВхДанных = "Документ";	
	КонецЕсли;	
	
	//Если ТипВхДанных = "Документ" И Объект1с.Проведен Тогда
	//	Объект1с.Записать(РежимЗаписиДокумента.Проведение);
	//Иначе
	Объект1с.ДополнительныеСвойства.Вставить("ЗаписьВходящихДанных", Истина);
	Если ТипВхДанных = "Документ" Тогда		
		Если Объект1с.Проведен Тогда			
			Объект1с.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			Если ДокументПроведен Тогда
				Объект1с.Записать(РежимЗаписиДокумента.ОтменаПроведения);	
			Иначе
				Объект1с.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;	
		КонецЕсли;
		//Если Объект1с.Проведен Тогда
		//	Объект1с.Проведен = Ложь;
		//	Попытка
		//		Объект1с.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		//	Исключение
		//		Объект1с.ОбменДанными.Загрузка = Истина;
		//		Объект1с.Записать(РежимЗаписиДокумента.Запись);
		//	КонецПопытки;
		//Иначе
		//	Объект1с.ОбменДанными.Загрузка = Истина;
		//	Объект1с.Записать(РежимЗаписиДокумента.Запись);
		//КонецЕсли;
	Иначе
		Объект1с.ОбменДанными.Загрузка = Истина;
		Объект1с.Записать();
	КонецЕсли;	
КонецФункции

Функция ЗаполнитьСсылки(Реквизиты)
	Для Каждого Элемент Из Реквизиты Цикл
		Если ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			ИмяТипа = СтрРазделить(Элемент.Значение.Тип, ".");
			Если ИмяТипа.Количество() > 1 Тогда
				ИмяТипа = ИмяТипа[1];
			Иначе
				Продолжить; // Todo
			КонецЕсли;
			Если ИмяТипа = "ХранилищеЗначения" Тогда
				Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
					Значение = Base64Значение(Элемент.Значение);
				Иначе
					Значение = Элемент.Значение;
				КонецЕсли;
			Иначе
				Значение = Элемент.Значение;
				Значение = НайтиПоРеквизитамИзСтруктуры(Значение, ИмяТипа);
			КонецЕсли;
	        Реквизиты.Вставить(Элемент.Ключ, Значение);
		ИначеЕсли СтрДлина(Элемент.Значение) = 19 и Сред(Элемент.Значение,11,1) = "T" Тогда
			Значение = ДатаИзJSON(Элемент.Значение);
			Реквизиты.Вставить(Элемент.Ключ, Значение);
		КонецЕсли;
	КонецЦикла;
КонецФункции

Функция НайтиПоРеквизитамИзСтруктуры(ВходящиеДанные, ИмяТипа)
	Если ТипЗнч(ВходящиеДанные) = Тип("Строка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Значение = Неопределено;
	
	СсылкаНайдена = Ложь;
	Если Найти(ВходящиеДанные.Тип, "СправочникСсылка") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"Выбрать Ссылка Из Справочник."+ИмяТипа+" Где Истина И &ОтборКод И &ОтборНаименование И &ОтборЭтоГруппа";
		
		Если ВходящиеДанные.Свойство("Код") и ЗначениеЗаполнено(ВходящиеДанные.Код) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборКод", "Код = &Код");
			Запрос.УстановитьПараметр("Код", ВходящиеДанные.Код);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборКод", "Истина");
		КонецЕсли;
		Если Не СсылкаНайдена и ВходящиеДанные.Свойство("Наименование") И ЗначениеЗаполнено(ВходящиеДанные.Наименование) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборНаименование", "Наименование = &Наименование");
			Запрос.УстановитьПараметр("Наименование", ВходящиеДанные.Наименование);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборНаименование", "Истина");
		КонецЕсли;
		Если ВходящиеДанные.Свойство("ЭтоГруппа") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборЭтоГруппа", "ЭтоГруппа = &ЭтоГруппа");
			Запрос.УстановитьПараметр("ЭтоГруппа", ВходящиеДанные.ЭтоГруппа);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборЭтоГруппа", "Истина");
		КонецЕсли;
		Рез = Запрос.Выполнить().Выбрать();
		Если Рез.Следующий() Тогда
			Возврат Рез.Ссылка;
		КонецЕсли;
		//Если Не СсылкаНайдена Тогда	
		//	Значение = Справочники[ИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ВходящиеДанные.Ссылка));	
		//КонецЕсли;
	ИначеЕсли Найти(ВходящиеДанные.Тип, "ДокументСсылка") Тогда
		Если ВходящиеДанные.Свойство("Номер") И ЗначениеЗаполнено(ВходящиеДанные.Номер) Тогда
			Попытка
				Значение = Документы[ИмяТипа].НайтиПоНомеру(ВходящиеДанные.Номер, ДатаИзJSON(ВходящиеДанные.Дата));
			Исключение
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
		//Если НЕ СсылкаНайдена Тогда
		//	Значение = Документы[ИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ВходящиеДанные.Ссылка));	
		//КонецЕсли;	
	ИначеЕсли Найти(ВходящиеДанные.Тип, "ПеречислениеСсылка") Тогда
		ЗначенияПеречисления = СтрРазделить(ВходящиеДанные.Ссылка, ".");
		Если Метаданные.Перечисления.Найти(ЗначенияПеречисления[1]) = Неопределено Тогда
			Значение = Неопределено;
		Иначе	
			Если ЗначенияПеречисления[2] = "ПустаяСсылка" Тогда
				Значение = Перечисления[ЗначенияПеречисления[1]].ПустаяСсылка();
			Иначе
				Значение = Перечисления[ЗначенияПеречисления[1]][ЗначенияПеречисления[2]];
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Найти(ВходящиеДанные.Тип, "ПланСчетовСсылка") Тогда
		Если ВходящиеДанные.Свойство("Код") и ЗначениеЗаполнено(ВходящиеДанные.Код) Тогда
			Значение = ПланыСчетов[ИмяТипа].НайтиПоКоду(ВходящиеДанные.Код);
		ИначеЕсли ВходящиеДанные.Свойство("Представление") и ЗначениеЗаполнено(ВходящиеДанные.Представление) Тогда
			Значение = ПланыСчетов[ИмяТипа].НайтиПоКоду(ВходящиеДанные.Представление);
		Иначе	
			//Значение = ПланыСчетов[ИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ВходящиеДанные.Ссылка));				
		КонецЕсли;
	ИначеЕсли Найти(ВходящиеДанные.Тип, "ПланВидовХарактеристикСсылка") Тогда
		Если ВходящиеДанные.Свойство("Наименование") и ЗначениеЗаполнено(ВходящиеДанные.Наименование) Тогда
			Значение = ПланыВидовХарактеристик[ИмяТипа].НайтиПоНаименованию(ВходящиеДанные.Наименование);
		Иначе
			//Значение = ПланыВидовХарактеристик[ИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ВходящиеДанные.Ссылка));
		КонецЕсли;
	ИначеЕсли Найти(ВходящиеДанные.Тип, "ПланВидовРасчетаСсылка") Тогда
		Если ВходящиеДанные.Свойство("Наименование") и ЗначениеЗаполнено(ВходящиеДанные.Наименование) Тогда
			Значение = ПланыВидовРасчета[ИмяТипа].НайтиПоНаименованию(ВходящиеДанные.Наименование);
		Иначе
			//Значение = ПланыВидовХарактеристик[ИмяТипа].ПолучитьСсылку(Новый УникальныйИдентификатор(ВходящиеДанные.Ссылка));
		КонецЕсли;
	КонецЕсли;
	Возврат Значение;
КонецФункции

Функция ДанныеВПростыеТипыРекурсивно(Данные, ТолькоСсылки)
	
	ЭтоМассив = Ложь;
	ЭтоТаблица = Ложь;
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ПреобразованныеДанные = Новый Структура();
	ИначеЕсли ТипЗнч(Данные) = Тип("Массив") Тогда
		ПреобразованныеДанные = Новый Массив;
		ЭтоМассив = Истина;	
	ИначеЕсли ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
		ПреобразованныеДанные = Новый Массив;
		ЭтоТаблица = Истина;
	Иначе
		Возврат ЭлементВПростыеТипы(Данные, ТолькоСсылки);
	КонецЕсли;
	
	Если ЭтоТаблица Тогда
		Если Данные.Количество() = 0 Тогда				
		Иначе
			СтруктураСтроки = "";
			Для Каждого Колонка Из Данные.Колонки Цикл
				СтруктураСтроки = СтруктураСтроки + Колонка.Имя + ",";
			КонецЦикла;
			СтруктураСтроки = Лев(СтруктураСтроки, СтрДлина(СтруктураСтроки)-1);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Элемент Из Данные Цикл				
		Если ЭтоМассив Тогда
			НовоеЗначение = ЭлементВПростыеТипы(Элемент, ТолькоСсылки);
			ПреобразованныеДанные.Добавить(НовоеЗначение);
		ИначеЕсли ЭтоТаблица Тогда		
			СтрокаСтруктурой = Новый Структура(СтруктураСтроки);
			ЗаполнитьЗначенияСвойств(СтрокаСтруктурой, Элемент);					
			ПреобразованныеДанные.Добавить(ЭлементВПростыеТипы(СтрокаСтруктурой, ТолькоСсылки));
		Иначе
			НовоеЗначение = ЭлементВПростыеТипы(Элемент.Значение, ТолькоСсылки);
			ПреобразованныеДанные.Вставить(Элемент.Ключ, НовоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПреобразованныеДанные;
	
КонецФункции // СтруктураВJSON()

Функция ЭлементВПростыеТипы(Элемент, ТолькоСсылка = Ложь)
	
	Если ТипЗнч(Элемент) = Тип("Число") ИЛИ
		 ТипЗнч(Элемент) = Тип("Булево") ИЛИ			 
		 ТипЗнч(Элемент) = Тип("Дата")	
	Тогда
		НовоеЗначение = Элемент;
	ИначеЕсли ТипЗнч(Элемент) = Тип("Строка") Тогда
		НовоеЗначение = Элемент;
	ИначеЕсли ТипЗнч(Элемент) = Тип("null") Тогда
		НовоеЗначение = "";
	ИначеЕсли ТипЗнч(Элемент) = Тип("УникальныйИдентификатор") Тогда
		НовоеЗначение = Строка(Элемент);
	ИначеЕсли ТипЗнч(Элемент) = Тип("Неопределено") Тогда
		НовоеЗначение = "";
	ИначеЕсли ТипЗнч(Элемент) = Тип("ХранилищеЗначения") Тогда
		ДанныеХранилища = Элемент.Получить();
		Если ТипЗнч(ДанныеХранилища) = Тип("ДвоичныеДанные") Тогда
			НовоеЗначение = Новый Структура("Тип, Значение", "ХранилищеЗначения.ХранилищеЗначения", Base64Строка(ДанныеХранилища));
		Иначе
			НовоеЗначение = Новый Структура("Тип, Значение", "ХранилищеЗначения.ХранилищеЗначения", ДанныеХранилища);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Элемент) = Тип("Структура") Тогда
		НовоеЗначение = Новый Структура;
		Для Каждого ВложенныйЭлемент Из Элемент Цикл
			НовоеЗначение.Вставить(ВложенныйЭлемент.Ключ, ДанныеВПростыеТипыРекурсивно(ВложенныйЭлемент.Значение, ТолькоСсылка));
		КонецЦикла;
	ИначеЕсли ТипЗнч(Элемент) = Тип("Массив") Тогда	
		НовоеЗначение = Новый Массив;
		Для Каждого ВложенныйЭлемент Из Элемент Цикл
			НовоеЗначение.Добавить(ДанныеВПростыеТипыРекурсивно(ВложенныйЭлемент, ТолькоСсылка));
		КонецЦикла;
	ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаЗначений") Тогда	
		НовоеЗначение = ДанныеВПростыеТипыРекурсивно(Элемент, ТолькоСсылка);
	Иначе
		НовоеЗначение = Объект1сВПростыеТипы(Элемент, ТолькоСсылка);
	КонецЕсли;
	
	Возврат НовоеЗначение;
	
КонецФункции // ЭлементВПростыеТипы()

Функция Объект1сВПростыеТипы(Элемент, Знач ТолькоСсылка = Ложь, ВключаяДвижения = Ложь) Экспорт
	
	ТипЭлемента = ТипЗнч(Элемент);
	Если Найти(ТипЭлемента, "Регистр") = 0 Тогда
		Если Не ЗначениеЗаполнено(Элемент) Тогда
			Возврат "";
		КонецЕсли;	
	КонецЕсли;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент)) Тогда			
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"СправочникСсылка", ТолькоСсылка);
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент)) Тогда			
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"ДокументСсылка", ТолькоСсылка);
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент)) Тогда
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПеречислениеСсылка", ТолькоСсылка);
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент)) Тогда		
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПланВидовХарактеристикСсылка", ТолькоСсылка);
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент)) Тогда		
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПланСчетовСсылка", ТолькоСсылка);
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент)) Тогда		
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"ПланВидовРасчетаСсылка", ТолькоСсылка);
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент)) Тогда		
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"БизнесПроцессСсылка", ТолькоСсылка);
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(Элемент)) Тогда		
		НовоеЗначение = ОбъектВСтруктуру(Элемент,"ЗадачаСсылка", ТолькоСсылка);
	ИначеЕсли Найти(ТипЭлемента, "Регистр сведений") Тогда
		НовоеЗначение = ВыгрузитьНаборЗаписей(Элемент, "РегистрСведенийНаборЗаписей");
	ИначеЕсли Найти(ТипЭлемента, "Регистр накопления") Тогда	
		НовоеЗначение = ВыгрузитьНаборЗаписей(Элемент, "РегистрНакопленияНаборЗаписей");
	ИначеЕсли Найти(ТипЭлемента, "Регистр бухгалтерии") Тогда	
		НовоеЗначение = ВыгрузитьНаборЗаписей(Элемент, "РегистрБухгалтерииНаборЗаписей");
	Иначе
		НовоеЗначение = Новый Структура("СложныйТип, Тип, Представление", Истина, Строка(ТипЗнч(Элемент)), Строка(Элемент));		
	КонецЕсли;
	
	Возврат НовоеЗначение;
КонецФункции
