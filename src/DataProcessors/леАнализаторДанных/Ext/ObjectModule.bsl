Перем ВходящиеДанные Экспорт;
Перем ИсходящиеДанные Экспорт;

Функция ВыполнитьОбработку() Экспорт
	ЗаполнитьМассивОбъектовРекурсивно(ВходящиеДанные);
КонецФункции

Функция ЗаполнитьМассивОбъектовРекурсивно(Значение) Экспорт
	
	Если Не ЗначениеЗаполнено(Значение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(Значение);
	Если ТипЗначения = Тип("Строка") 
		или ТипЗначения = Тип("Число") 
		или ТипЗначения = Тип("Булево") 
		или ТипЗначения = Тип("Неопределено") 
		или ТипЗначения = Тип("УникальныйИдентификатор") 
		или Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначения)
	Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда
		Индекс = ИсходящиеДанные.Найти(Значение);
		Если Индекс = Неопределено Тогда
			ИсходящиеДанные.Вставить(0,Значение);
		Иначе
			ИсходящиеДанные.Удалить(Индекс);			
			ИсходящиеДанные.Вставить(0,Значение);
			Возврат Неопределено;
		КонецЕсли;		
	КонецЕсли;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда			
		АнализРеквизитовОбъекта(Значение, "СправочникСсылка");
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда			
		АнализРеквизитовОбъекта(Значение, "ДокументСсылка");
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда		
		АнализРеквизитовОбъекта(Значение, "ПланВидовХарактеристикСсылка");
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда		
		АнализРеквизитовОбъекта(Значение, "ПланСчетовСсылка");
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда		
		АнализРеквизитовОбъекта(Значение, "ПланВидовРасчетаСсылка");
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда		
		АнализРеквизитовОбъекта(Значение, "БизнесПроцессСсылка");
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(ТипЗначения) Тогда		
		АнализРеквизитовОбъекта(Значение, "ЗадачаСсылка");		
	КонецЕсли;
	
КонецФункции

Функция АнализРеквизитовОбъекта(ЗначениеСсылка, КоллекцияТипа)	

	Мета = ЗначениеСсылка.Метаданные();
	
	Если ЗначениеЗаполнено(ЗначениеСсылка) Тогда
		АнализСтандартныеРеквизиты(Мета, ЗначениеСсылка);
		АнализРеквизиты(Мета, ЗначениеСсылка, КоллекцияТипа);
		АнализТабличныеЧасти(Мета, ЗначениеСсылка, КоллекцияТипа);
		Если Найти(КоллекцияТипа, "ДокументСсылка") Тогда
			АнализДвижения(Мета, ЗначениеСсылка, КоллекцияТипа);
		КонецЕсли;
	КонецЕсли;	
	
КонецФункции // ОбъектВСтруктуру()

Функция АнализСтандартныеРеквизиты(Мета, ЗначениеСсылка)
	СтандартныеРеквизиты = Новый Структура;
	Для Каждого Реквизит Из Мета.СтандартныеРеквизиты Цикл
		Если Реквизит.Имя = "Родитель" Тогда
			ЗаполнитьМассивОбъектовРекурсивно(ЗначениеСсылка[Реквизит.Имя]);
		КонецЕсли;
		Если Реквизит.Имя = "Владелец" Тогда
			ЗаполнитьМассивОбъектовРекурсивно(ЗначениеСсылка[Реквизит.Имя]);
		КонецЕсли;		
	КонецЦикла;
КонецФункции

Функция АнализРеквизиты(Мета, ЗначениеСсылка, КоллекцияТипа)	
	Для Каждого Реквизит Из Мета.Реквизиты Цикл
		Если Найти(КоллекцияТипа, "СправочникСсылка") Тогда			
			Использование = Строка(Реквизит.Использование);
			Если ЗначениеСсылка.ЭтоГруппа Тогда
				Если Использование = "ДляГруппы" или Использование = "ДляГруппыИЭлемента" Тогда
					ЗаполнитьМассивОбъектовРекурсивно(ЗначениеСсылка[Реквизит.Имя]);
				КонецЕсли;
			Иначе
				ЗаполнитьМассивОбъектовРекурсивно(ЗначениеСсылка[Реквизит.Имя]);	
			КонецЕсли;
		Иначе
			ЗаполнитьМассивОбъектовРекурсивно(ЗначениеСсылка[Реквизит.Имя]);
		КонецЕсли;
	КонецЦикла;	
КонецФункции

Функция АнализТабличныеЧасти(Мета, ЗначениеСсылка, КоллекцияТипа)	
	Для Каждого МетаТЧ Из Мета.ТабличныеЧасти Цикл
		ДанныеТЧ = Новый Массив;
		Реквизиты = Мета.ТабличныеЧасти[МетаТЧ.Имя].Реквизиты;
		
		ТЧ = ЗначениеСсылка[МетаТЧ.Имя];
		Если ТЧ.Количество() Тогда
			Для Каждого Строка Из Тч Цикл
				НоваяСтрока = Новый Структура;
				Для Каждого Реквизит Из Реквизиты Цикл			
					ЗаполнитьМассивОбъектовРекурсивно(Строка[Реквизит.Имя]);
				КонецЦикла;				
			КонецЦикла;
		КонецЕсли;		
	КонецЦикла;	
КонецФункции

Функция АнализДвижения(Мета, ЗначениеСсылка, КоллекцияТипа)		
	Для Каждого Регистр Из Мета.Движения Цикл
		ИмяРегистра = Регистр.Имя;
		ДанныеДвижения = Новый Структура;
		Если Не Метаданные.РегистрыБухгалтерии.Найти(ИмяРегистра) = Неопределено Тогда			
			НаборЗаписей = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
			ИмяРегистра = "РегистрБухгалтерии" + Регистр.Имя;
			НаборЗаписей.Отбор.Регистратор.Установить(ЗначениеСсылка);
			НаборЗаписей.Прочитать();			
		ИначеЕсли Не Метаданные.РегистрыНакопления.Найти(ИмяРегистра) = Неопределено Тогда			
			НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			ИмяРегистра = "РегистрНакопления" + Регистр.Имя;
			НаборЗаписей.Отбор.Регистратор.Установить(ЗначениеСсылка);
			НаборЗаписей.Прочитать();			
		ИначеЕсли Не Метаданные.РегистрыСведений.Найти(ИмяРегистра) = Неопределено Тогда			
			НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			ИмяРегистра = "РегистрСведений" + Регистр.Имя;
			НаборЗаписей.Отбор.Регистратор.Установить(ЗначениеСсылка);
			НаборЗаписей.Прочитать();						
		КонецЕсли;
		Таблица = НаборЗаписей.Выгрузить();
		Если Таблица.Количество() = 0 Тогда
		Иначе
			Таблица.ЗаполнитьЗначения(Неопределено, "Регистратор");
			Для Каждого Строка Из Таблица Цикл
				Для Каждого Колонка Из Таблица.Колонки Цикл
					ЗаполнитьМассивОбъектовРекурсивно(Строка[Колонка.Имя]);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;		
	КонецЦикла;	
КонецФункции

ИсходящиеДанные = Новый Массив;