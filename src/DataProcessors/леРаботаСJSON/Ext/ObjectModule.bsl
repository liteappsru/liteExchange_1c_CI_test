#Область ЭкспортируемыеПеременные
Перем Ошибка Экспорт;
#КонецОбласти

#Область ЭкспортируемыеПроцедуры
Функция ВJSON(Данные, БезПроверки = Истина) Экспорт
	Если БезПроверки Тогда
		Попытка
			Возврат ПреобразоватьВJSON(Данные);
		Исключение
			леЛоггирование.СообщитьОбОшибке(ОписаниеОшибки(), леЛоггирование.ИмяСобытияОбмен());
			ПреобразоватьВJSON(ДанныеВПростыеТипыРекурсивно(Данные));
		КонецПопытки;
	Иначе
		Возврат ПреобразоватьВJSON(ДанныеВПростыеТипыРекурсивно(Данные));
	КонецЕсли;
КонецФункции

Функция ИзJSON(Данные) Экспорт
	Возврат ДанныеИзJSON(Данные);
КонецФункции

Функция ДатаИзJSON(СтрокаJSON, ФорматДаты = "")

	ФорматДаты = ?(ФорматДаты = "",ФорматДатыJSON.ISO,ФорматДаты);
	Дата1С = Неопределено;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку("{
	|""date"": """+СтрокаJSON+"""
	|}");
	Попытка
		Дата1С = ПрочитатьJSON(ЧтениеJSON, Ложь, "date", ФорматДаты).date;
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Возврат Дата1С;
	
КонецФункции
#КонецОбласти

Функция ПреобразоватьВJSON(Данные)
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб,,,,,Истина);
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	
	НастройкиСериализацииJSON = Новый НастройкиСериализацииJSON;
	НастройкиСериализацииJSON.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.ЛокальнаяДата;
	НастройкиСериализацииJSON.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	
	ЗаписатьJSON(ЗаписьJSON, Данные, НастройкиСериализацииJSON);
	
	ТекстСообщения = ЗаписьJSON.Закрыть();
	
	Возврат ТекстСообщения;	
КонецФункции

Функция ЭлементВПростыеТипы(Элемент, ТолькоСсылка = Ложь)
	
	Если ТипЗнч(Элемент) = Тип("Число") ИЛИ
		 ТипЗнч(Элемент) = Тип("Булево") ИЛИ			 
		 ТипЗнч(Элемент) = Тип("Дата")	
	Тогда
		НовоеЗначение = Элемент;
	ИначеЕсли ТипЗнч(Элемент) = Тип("Строка") Тогда
		НовоеЗначение = Элемент;
	ИначеЕсли ТипЗнч(Элемент) = Тип("null") Тогда
		НовоеЗначение = "";
	ИначеЕсли ТипЗнч(Элемент) = Тип("УникальныйИдентификатор") Тогда
		НовоеЗначение = Строка(Элемент);
	ИначеЕсли ТипЗнч(Элемент) = Тип("Неопределено") Тогда
		НовоеЗначение = "";
	ИначеЕсли ТипЗнч(Элемент) = Тип("ХранилищеЗначения") Тогда
		ДанныеХранилища = Элемент.Получить();
		Если ТипЗнч(ДанныеХранилища) = Тип("ДвоичныеДанные") Тогда
			НовоеЗначение = Новый Структура("Тип, Значение", "ХранилищеЗначения.ХранилищеЗначения", Base64Строка(ДанныеХранилища));
		Иначе
			НовоеЗначение = Новый Структура("Тип, Значение", "ХранилищеЗначения.ХранилищеЗначения", ДанныеХранилища);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Элемент) = Тип("Структура") Тогда
		НовоеЗначение = Новый Структура;
		Для Каждого ВложенныйЭлемент Из Элемент Цикл
			НовоеЗначение.Вставить(ВложенныйЭлемент.Ключ, ДанныеВПростыеТипыРекурсивно(ВложенныйЭлемент.Значение));
		КонецЦикла;
	ИначеЕсли ТипЗнч(Элемент) = Тип("Массив") Тогда	
		НовоеЗначение = Новый Массив;
		Для Каждого ВложенныйЭлемент Из Элемент Цикл
			НовоеЗначение.Добавить(ДанныеВПростыеТипыРекурсивно(ВложенныйЭлемент));
		КонецЦикла;
	ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаЗначений") Тогда	
		НовоеЗначение = ДанныеВПростыеТипыРекурсивно(Элемент);
	Иначе
		ВызватьИсключение "Неподдерживаемый тип данных";
	КонецЕсли;
	
	Возврат НовоеЗначение;
	
КонецФункции // ЭлементВПростыеТипы()

Функция ДанныеВПростыеТипыРекурсивно(Данные)
	
	ЭтоМассив = Ложь;
	ЭтоТаблица = Ложь;
	Если ТипЗнч(Данные) = Тип("Структура") Тогда
		ПреобразованныеДанные = Новый Структура();
	ИначеЕсли ТипЗнч(Данные) = Тип("Массив") Тогда
		ПреобразованныеДанные = Новый Массив;
		ЭтоМассив = Истина;	
	ИначеЕсли ТипЗнч(Данные) = Тип("ТаблицаЗначений") Тогда
		ПреобразованныеДанные = Новый Массив;
		ЭтоТаблица = Истина;
	Иначе
		Возврат ЭлементВПростыеТипы(Данные);
	КонецЕсли;
	
	Если ЭтоТаблица Тогда
		Если Данные.Количество() = 0 Тогда				
		Иначе
			СтруктураСтроки = "";
			Для Каждого Колонка Из Данные.Колонки Цикл
				СтруктураСтроки = СтруктураСтроки + Колонка.Имя + ",";
			КонецЦикла;
			СтруктураСтроки = Лев(СтруктураСтроки, СтрДлина(СтруктураСтроки)-1);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Элемент Из Данные Цикл				
		Если ЭтоМассив Тогда
			НовоеЗначение = ЭлементВПростыеТипы(Элемент);
			ПреобразованныеДанные.Добавить(НовоеЗначение);
		ИначеЕсли ЭтоТаблица Тогда		
			СтрокаСтруктурой = Новый Структура(СтруктураСтроки);
			ЗаполнитьЗначенияСвойств(СтрокаСтруктурой, Элемент);					
			ПреобразованныеДанные.Добавить(ЭлементВПростыеТипы(СтрокаСтруктурой));
		Иначе
			НовоеЗначение = ЭлементВПростыеТипы(Элемент.Значение);
			ПреобразованныеДанные.Вставить(Элемент.Ключ, НовоеЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПреобразованныеДанные;
	
КонецФункции // СтруктураВJSON()

Функция ОпределитьТипСсылки(ТекЗначение, ТекРеквизит = "")

	Попытка
		Переменная = ТекЗначение.Метаданные().ЗаписьДвиженийПриПроведении;
		Возврат "ДокументСсылка."+ТекЗначение.Метаданные().Имя;
	Исключение
	КонецПопытки;
	Попытка
		Переменная = ТекЗначение.Владелец;
		Возврат "СправочникСсылка."+ТекЗначение.Метаданные().Имя;
	Исключение
	КонецПопытки;
	
	Попытка
		Переменная = ТекЗначение.Метаданные().ЗначенияПеречисления;
		Возврат "ПеречислениеСсылка."+ТекЗначение.Метаданные().Имя;
	Исключение
	КонецПопытки;
	Попытка
		Переменная = ТекЗначение.Метаданные().ТекущийИсполнитель;
		Возврат "ЗадачаСсылка."+ТекЗначение.Метаданные().Имя;
	Исключение
	КонецПопытки;
	Попытка
		Переменная = ТекЗначение.Метаданные().Характеристики;
		Возврат "ПланВидовХарактеристикСсылка."+ТекЗначение.Метаданные().Имя;
	Исключение
	КонецПопытки;
	
	Попытка
		Переменная = ТекЗначение.Метаданные().ПризнакиУчетаСубконто;
		Возврат "ПланСчетовСсылка."+ТекЗначение.Метаданные().Имя;
	Исключение
	КонецПопытки;
	Попытка
		Переменная = ТекЗначение.Метаданные().БазовыеВидыРасчета;
		Возврат "ПланВидовРасчетаСсылка."+ТекЗначение.Метаданные().Имя;
	Исключение
	КонецПопытки;
	
	Попытка
		Переменная = ТекЗначение.Стартован;
		Возврат "БизнесПроцессСсылка."+ТекЗначение.Метаданные().Имя;
	Исключение
	КонецПопытки;
	
	Возврат Строка(ТекРеквизит.Тип);

КонецФункции // ТипЗначенияРеквизитаРодитель()

Функция ЗначениеВJSON(Элемент, ТолькоСсылка = Ложь)
	
	Если ТипЗнч(Элемент) = Тип("Число") ИЛИ
		 ТипЗнч(Элемент) = Тип("Булево") ИЛИ			 
		 ТипЗнч(Элемент) = Тип("Дата")	
	Тогда
		НовоеЗначение = Элемент;
	ИначеЕсли ТипЗнч(Элемент) = Тип("Строка") Тогда
		НовоеЗначение = Элемент;
	ИначеЕсли ТипЗнч(Элемент) = Тип("null") Тогда
		НовоеЗначение = "";
	ИначеЕсли ТипЗнч(Элемент) = Тип("УникальныйИдентификатор") Тогда
		НовоеЗначение = Строка(Элемент);
	ИначеЕсли ТипЗнч(Элемент) = Тип("Неопределено") Тогда
		НовоеЗначение = "";
	ИначеЕсли ТипЗнч(Элемент) = Тип("Структура") Тогда	
		НовоеЗначение = Новый Структура;
		Для Каждого ВложенныйЭлемент Из Элемент Цикл
			НовоеЗначение.Вставить(ВложенныйЭлемент.Ключ, ДанныеВПростыеТипыРекурсивно(ВложенныйЭлемент.Значение));
		КонецЦикла;
	ИначеЕсли ТипЗнч(Элемент) = Тип("Массив") Тогда	
		НовоеЗначение = Новый Массив;
		Для Каждого ВложенныйЭлемент Из Элемент Цикл
			НовоеЗначение.Добавить(ДанныеВПростыеТипыРекурсивно(ВложенныйЭлемент));
		КонецЦикла;
	ИначеЕсли ТипЗнч(Элемент) = Тип("ТаблицаЗначений") Тогда	
		НовоеЗначение = ДанныеВПростыеТипыРекурсивно(Элемент);
	Иначе // объект 1с или неподдерживаемая сущность
		ВызватьИсключение "Неподдерживаемый тип данных: " + Элемент;
		//НовоеЗначение = Объект1сВПростыеТипы(Элемент);
	КонецЕсли;
	
	Возврат НовоеЗначение;
	
КонецФункции // СтруктураВJSON()

Функция ДанныеИзJSON(СтрокаJSON, ИменаПолейСДатами = "date")

	СтруктураJSON = Неопределено;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	Попытка
		СтруктураJSON = ПрочитатьJSON(ЧтениеJSON, Ложь, ИменаПолейСДатами, ФорматДатыJSON.ISO);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	ЧтениеJSON.Закрыть();
	
	Возврат СтруктураJSON;
	
КонецФункции // СтруктураВJSON()

Функция ПолучитьПараметрыПреобразованияJSONПоУмолчанию()
	
	ПараметрыПреобразованияПоУмолчанию = Новый Структура;
	ПараметрыПреобразованияПоУмолчанию.Вставить("ПрочитатьВСоответствие", Истина);
	ПараметрыПреобразованияПоУмолчанию.Вставить("ФорматДатыJSON", ФорматДатыJSON.ISO);
	ПараметрыПреобразованияПоУмолчанию.Вставить("ИменаСвойствСоЗначениямиДата", Неопределено);
	
	Возврат ПараметрыПреобразованияПоУмолчанию;
	
КонецФункции

Функция ПолучитьПараметрыЗаписиJSONПоУмолчанию()
	
	ПараметрыЗаписиJSONПоУмолчанию = Новый Структура;
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ПереносСтрок", ПереносСтрокJSON.Авто);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("СимволыОтступа", " ");
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ИспользоватьДвойныеКавычки", Истина);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ЭкранированиеСимволов", ЭкранированиеСимволовJSON.СимволыВнеASCII);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ЭкранироватьУгловыеСкобки", Истина);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ЭкранироватьРазделителиСтрок", Истина);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ЭкранироватьАмперсанд", Истина);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ЭкранироватьОдинарныеКавычки", Истина);
	ПараметрыЗаписиJSONПоУмолчанию.Вставить("ЭкранироватьСлеш", Истина);
	
	Возврат ПараметрыЗаписиJSONПоУмолчанию;
	
КонецФункции
