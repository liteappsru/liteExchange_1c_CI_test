// входящие данные
Перем Адрес    Экспорт;
Перем Данные   Экспорт;
Перем JSON     Экспорт;
Перем Файлы    Экспорт;
Перем Объект1с Экспорт;
Перем Таймаут  Экспорт;
Перем ФорматОтвета  Экспорт;
Перем Cookies       Экспорт;
Перем Сессия        Экспорт;
Перем Заголовки     Экспорт;

Перем РазрешитьПеренаправление Экспорт;
Перем ПроверятьSSL             Экспорт;
Перем КлиентскийСертификатSSL  Экспорт;
Перем Прокси                   Экспорт;
	
// Исходящие данные
Перем КодОтвета         Экспорт;
Перем СообщениеОбОшибке Экспорт;
Перем ОтветСервера      Экспорт;

#Область ПрограммныйИнтерфейс

#Область УпрощенныеМетоды
Функция ОтправитьДанные1сНаУдаленыйСервер(Данные, Адрес, Параметры = Неопределено) Экспорт
	ПараметрыОтправки = Новый Структура("Логин,Пароль");
	
	Если Не Параметры = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОтправки, Параметры);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("content-type","application/json");
	ДополнительныеПараметры.Вставить("Заголовки", Заголовки);
	
	Возврат ВызватьHTTPМетод(
		Неопределено, "POST", Адрес, Данные, Неопределено, Неопределено, ДополнительныеПараметры);
КонецФункции
#КонецОбласти

#Область МетодыHTTP

#Область МетодыОбщегоНазначения

// Отправляет GET запрос
//
// Параметры:
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   ПараметрыЗапроса - Структура, Соответствие - параметры, которые будут отправлены в URL (часть после ?).
//                                                См. описание параметра в ВызватьМетодВСеансе.
//   ДополнительныеПараметры - Структура - см. описание параметра в ВызватьМетодВСеансе.
//
// Возвращаемое значение:
// 	Структура - ответ на выполненный запрос. См. описание возвращаемого значения в ВызватьМетодВСеансе. 
// 
Функция Get(URL, ПараметрыЗапроса = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Возврат ВызватьHTTPМетод(
		Неопределено, "GET", URL, Неопределено, Неопределено, ПараметрыЗапроса, ДополнительныеПараметры);
	
КонецФункции

// Отправляет OPTIONS запрос
//
// Параметры:
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   ДополнительныеПараметры - Структура - см. описание параметра в ВызватьМетодВСеансе.
//
// Возвращаемое значение:
// 	Структура - ответ на выполненный запрос. См. описание возвращаемого значения в ВызватьМетодВСеансе. 
// 
Функция Options(URL, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ВызватьHTTPМетод(
		Неопределено, "OPTIONS", URL, Неопределено, Неопределено, Неопределено, ДополнительныеПараметры);
	
КонецФункции

// Отправляет HEAD запрос
//
// Параметры:
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   ДополнительныеПараметры - Структура - см. описание параметра в ВызватьМетодВСеансе.
//
// Возвращаемое значение:
// 	Структура - ответ на выполненный запрос. См. описание возвращаемого значения в ВызватьМетодВСеансе. 
//  
Функция Head(URL, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ВызватьHTTPМетод(
		Неопределено, "HEAD", URL, Неопределено, Неопределено, Неопределено, ДополнительныеПараметры);
	
КонецФункции

// Отправляет POST запрос
//
// Параметры:
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   Данные - Структура, Соответствие - см. описание параметра в ВызватьМетодВСеансе.
//   ДополнительныеПараметры - Структура - см. описание параметра в ВызватьМетодВСеансе.
//
// Возвращаемое значение:
// 	Структура - ответ на выполненный запрос. См. описание возвращаемого значения в ВызватьМетодВСеансе. 
//
Функция Post(URL, Данные = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ВызватьHTTPМетод(
		Неопределено, "POST", URL, Данные, Неопределено, Неопределено, ДополнительныеПараметры);

КонецФункции

// Отправляет PUT запрос
//
// Параметры:
//  URL - Строка - URL ресурса, к которому будет отправлен запрос. 
//  Данные - параметры, которые будут отправлены в теле запроса.
//           См. описание ДополнительныеПараметры.Данные в методе ВызватьМетод.
//  ДополнительныеПараметры - Структура - см. описание в методе ВызватьМетод
// Возвращаемое значение:
//  Структура - ответ на выполненный запрос. См. описание в методе ВызыватьМетод 
//
Функция Put(URL, Данные = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Возврат ВызватьHTTPМетод(
		Неопределено, "PUT", URL, Данные, Неопределено, Неопределено, ДополнительныеПараметры);
	
КонецФункции

// Отправляет PATCH запрос
//
// Параметры:
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   Данные - Структура, Соответствие - см. описание параметра в ВызватьМетодВСеансе.
//   ДополнительныеПараметры - Структура - см. описание параметра в ВызватьМетодВСеансе.
//
// Возвращаемое значение:
// 	Структура - ответ на выполненный запрос. См. описание возвращаемого значения в ВызватьМетодВСеансе. 
//
Функция Patch(URL, Данные = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Возврат ВызватьHTTPМетод(
		Неопределено, "PATCH", URL, Данные, Неопределено, Неопределено, ДополнительныеПараметры);
	
КонецФункции

// Отправляет DELETE запрос
//
// Параметры:
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   Данные - Структура, Соответствие - см. описание параметра в ВызватьМетодВСеансе.
//   ДополнительныеПараметры - Структура - см. описание параметра в ВызватьМетодВСеансе.
//
// Возвращаемое значение:
// 	Структура - ответ на выполненный запрос. См. описание возвращаемого значения в ВызватьМетодВСеансе. 
//
Функция Delete(URL, Данные = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Возврат ВызватьHTTPМетод(
		Неопределено, "DELETE", URL, Данные, Неопределено, Неопределено, ДополнительныеПараметры);
	
КонецФункции

#КонецОбласти

// Отправляет данные на указанный адрес для обработки с использованием указанного HTTP-метода.
//
// Параметры:
//   Метод - Строка - имя HTTP-метода для запроса.
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   ДополнительныеПараметры - Структура - см. описание параметра в ВызватьМетодВСеансе.
//
// Возвращаемое значение:
// 	Структура - ответ на выполненный запрос. См. описание возвращаемого значения в ВызватьМетодВСеансе. 
//
Функция ВызватьМетод(Метод, URL, ДополнительныеПараметры = Неопределено) Экспорт 

	Возврат ВызватьHTTPМетод(
		Неопределено, Метод, URL, Неопределено, Неопределено, Неопределено, ДополнительныеПараметры);
	
КонецФункции

#КонецОбласти

#Область ФорматыОтветов

// Возвращает ответ сервера в виде десериализованного значения JSON.
//
// Параметры:
//   Ответ - Структура - ответ сервера на отправленный запрос. 
//                      См. описание возвращаемого значения ВызватьМетод.
//   ПараметрыПреобразованияJSON - Структура - задает параметры преобразования JSON.
//      *ПрочитатьВСоответствие - Булево - Если Истина, чтение объекта JSON будет выполнено в Соответствие.
//                                         Если Ложь, объекты будут считываться в объект типа Структура.
//      *ФорматДатыJSON - ФорматДатыJSON - формат, в котором представлена дата в строке, подлежащей преобразованию. 
//      *ИменаСвойствСоЗначениямиДата -  Массив, Строка - имена свойств JSON, для которых нужно вызывать восстановление даты из строки.
// 
// Возвращаемое значение:
//   Соответствие - ответ сервера в виде десериализованного значения JSON.
//                  Если ПараметрыПреобразования.ПрочитатьВСоответствие = Истина (по умолчанию).
//   Структура - если ПараметрыПреобразования.ПрочитатьВСоответствие = Ложь. 
//
Функция КакJson(Ответ, ПараметрыПреобразованияJSON = Неопределено) Экспорт
		
	Возврат леРаботаСJSON.ДанныеИзJSON(Ответ);
	
КонецФункции

// Возвращает ответ сервера в виде текста.
//
// Параметры:
//   Ответ - Структура - ответ сервера на отправленный запрос. 
//                       См. описание возвращаемого значения ВызватьМетод.
//   Кодировка - Строка, КодировкаТекста - определяет кодировку текста.
//                                         Если значение не задано, то кодировка извлекается из Ответ.Кодировка.
// 
// Возвращаемое значение:
//   Строка - ответ сервера в виде текста. 
//
Функция КакТекст(Ответ, Кодировка = Неопределено) Экспорт
	                   
	Если Не ЗначениеЗаполнено(Кодировка) Тогда
		Кодировка = Ответ.Кодировка;
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(РаспаковатьОтвет(Ответ).ОткрытьПотокДляЧтения(), Кодировка);
	Текст = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	Возврат Текст;
	
КонецФункции

// Возвращает ответ сервера в двоичных данных.
//
// Параметры:
//   Ответ - Структура - ответ сервера на отправленный запрос. 
//                       См. описание возвращаемого значения ВызватьМетод.
//
// Возвращаемое значение:
//   Строка - ответ сервера в виде двоичных данных. 
//
Функция КакДвоичныеДанные(Ответ) Экспорт
	
	Возврат РаспаковатьОтвет(Ответ);	
	
КонецФункции

#КонецОбласти

#Область Сессия

// Создает объект для хранения параметров сессии.
//
// Возвращаемое значение:
//   Структура - параметры сессии:
//      *Заголовки - Соответствие - HTTP заголовки запроса.
//      *Аутентификация - Структура - параметры аутентификации запроса.
//          *Тип - Строка - тип аутентификации. Допустимые значения: Digest, Basic. Для Basic Тип можно не указывать.
//          *Пользователь - Строка - имя пользователя.
//          *Пароль - Строка - пароль пользователя.
//      *Прокси - ИнтернетПрокси - параметры прокси, которые будут использованы при отправке запроса.
//                Значение по умолчанию: Неопределено. При этом если в конфигурации используется БСП, 
//                                                     то значения прокси будет взято из БСП.
//      *ПараметрыЗапроса - Структура, Соответствие - параметры, которые будут отправлены в URL (часть после ?):
//          *<Ключ> - Строка - ключ параметра в URL.
//          *<Значение> - Строка - значение параметра URL
//                      - Массив - сформирует строку из нескольких параметров: key=value1&key=value2 и т.д.
//      *ПроверятьSSL - Булево - Ложь - проверка сертификата сервера не выполняется.
//                             - Истина - используется значение СертификатыУдостоверяющихЦентровОС. 
//                    - СертификатыУдостоверяющихЦентровФайл - см. в синтаксис-помощнике описание СертификатыУдостоверяющихЦентровФайл.
//                      Значение по умолчанию: Истина.
//      *КлиентскийСертификатSSL - СертификатКлиентаФайл - см. в синтаксис-помощнике описание СертификатКлиентаФайл.
//                               - СертификатКлиентаWindows - см. в синтаксис-помощнике описание СертификатКлиентаWindows.
//                                 Значение по умолчанию: Неопределено.
//      *МаксимальноеКоличествоПеренаправлений - Число - максимальное количество редиректов. Защита от зацикливания.
//                                               Значение по умолчанию: см. функцию МаксимальноеКоличествоПеренаправлений 
//      *Cookies - Соответствие - хранилище cookies.
//
Функция СоздатьСессию() Экспорт
	
	Сессия = Новый Структура;
	Сессия.Вставить("Заголовки", ЗаголовкиПоУмолчанию());
	Сессия.Вставить("Аутентификация", Неопределено);
	Сессия.Вставить("Прокси", Неопределено);
	Сессия.Вставить("ПараметрыЗапроса", Новый Структура);
	Сессия.Вставить("ПроверятьSSL", Истина);
	Сессия.Вставить("КлиентскийСертификатSSL", Неопределено);
	Сессия.Вставить("МаксимальноеКоличествоПеренаправлений", МаксимальноеКоличествоПеренаправлений());
	Сессия.Вставить("Cookies", Новый Соответствие);
	Сессия.Вставить("СлужебныеДанные", Новый Структура("ПараметрыDigest"));
	
	Возврат Сессия;
	
КонецФункции

// Отправляет данные на указанный адрес для обработки с использованием указанного HTTP-метода в контексте Сессии.
//
// Параметры:
//   Сессия - Структура - параметры сессии:
//      *Заголовки - Соответствие - HTTP заголовки запроса.
//      *Аутентификация - Структура - параметры аутентификации запроса.
//          *Тип - Строка - тип аутентификации. Допустимые значения: Digest, Basic. Для Basic Тип можно не указывать.
//          *Пользователь - Строка - имя пользователя.
//          *Пароль - Строка - пароль пользователя.
//          *ИспользоватьАутентификациюОС - Булево - включает использование аутентификации NTLM или Negotiate.
//                                                   Значение по умолчанию: Ложь.
//      *Прокси - ИнтернетПрокси - параметры прокси, которые будут использованы при отправке запроса.
//                Значение по умолчанию: Неопределено. При этом если в конфигурации используется БСП, 
//                                                     то значения прокси будет взято из БСП.
//      *ПараметрыЗапроса - Структура, Соответствие - параметры, которые будут отправлены в URL (часть после ?):
//          *<Ключ> - Строка - ключ параметра в URL.
//          *<Значение> - Строка - значение параметра URL
//                      - Массив - сформирует строку из нескольких параметров: key=value1&key=value2 и т.д.
//      *ПроверятьSSL - Булево - Ложь - проверка сертификата сервера не выполняется.
//                             - Истина - используется значение СертификатыУдостоверяющихЦентровОС. 
//                    - СертификатыУдостоверяющихЦентровФайл - см. в синтаксис-помощнике описание СертификатыУдостоверяющихЦентровФайл.
//                      Значение по умолчанию: Истина.
//      *КлиентскийСертификатSSL - СертификатКлиентаФайл - см. в синтаксис-помощнике описание СертификатКлиентаФайл.
//                               - СертификатКлиентаWindows - см. в синтаксис-помощнике описание СертификатКлиентаWindows.
//                                 Значение по умолчанию: Неопределено.
//      *МаксимальноеКоличествоПеренаправлений - Число - максимальное количество редиректов. Защита от зацикливания.
//                                               Значение по умолчанию: см. функцию МаксимальноеКоличествоПеренаправлений 
//      *Cookies - Соответствие - хранилище cookies.
//   Метод - Строка - имя HTTP-метода для запроса.
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//   ДополнительныеПараметры - Структура - позволяет задать дополнительные параметры:
//      *Заголовки - Соответствие - HTTP заголовки запроса.
//      *Аутентификация - Структура - параметры аутентификации запроса.
//          *Тип - Строка - тип аутентификации. Допустимые значения: Digest, Basic. Для Basic Тип можно не указывать.
//          *Пользователь - Строка - имя пользователя.
//          *Пароль - Строка - пароль пользователя.
//          *ИспользоватьАутентификациюОС - Булево - включает использование аутентификации NTLM или Negotiate.
//                                                   Значение по умолчанию: Ложь.
//      *Прокси - ИнтернетПрокси - параметры прокси, которые будут использованы при отправке запроса.
//                Значение по умолчанию: Неопределено. При этом если в конфигурации используется БСП, 
//                                                     то значения прокси будет взято из БСП.
//      *ПараметрыЗапроса - Структура, Соответствие - параметры, которые будут отправлены в URL (часть после ?):
//          *<Ключ> - Строка - ключ параметра в URL.
//          *<Значение> - Строка - значение параметра URL
//                      - Массив - сформирует строку из нескольких параметров: key=value1&key=value2 и т.д.
//      *ПроверятьSSL - Булево - Ложь - проверка сертификата сервера не выполняется.
//                             - Истина - используется значение СертификатыУдостоверяющихЦентровОС. 
//                    - СертификатыУдостоверяющихЦентровФайл - см. в синтаксис-помощнике описание СертификатыУдостоверяющихЦентровФайл.
//                      Значение по умолчанию: Истина.
//      *КлиентскийСертификатSSL - СертификатКлиентаФайл - см. в синтаксис-помощнике описание СертификатКлиентаФайл.
//                               - СертификатКлиентаWindows - см. в синтаксис-помощнике описание СертификатКлиентаWindows.
//                                 Значение по умолчанию: Неопределено.
//      *Cookies - Массив - значения cookies, которые нужно установить в заголовках запроса:
//          **Наименование - Строка - имя cookie.
//          **Значение - Строка - значение cookie.
//      *Таймаут - Число - время ожидания осуществляемого соединения и операций, в секундах. Значение по умолчанию - 30 сек.
//      *РазрешитьПеренаправление - Булево - Истина - редиректы будут автоматически разрешены.
//                                           Ложь - будет выполнен только один запрос к серверу.
//      *Json - Структура, Соответствие - данные, которые необходимо сериализовать в JSON.
//      *ПараметрыПреобразованияJSON - Структура - задает параметры преобразования JSON:
//          **ПрочитатьВСоответствие - Булево - Если Истина, чтение объекта JSON будет выполнено в Соответствие.
//                                              Если Ложь, объекты будут считываться в объект типа Структура.
//          **ФорматДатыJSON - ФорматДатыJSON - формат, в котором представлена дата в строке, подлежащей преобразованию. 
//          **ИменаСвойствСоЗначениямиДата -  Массив, Строка - имена свойств JSON, для которых нужно вызывать восстановление даты из строки.
//      *ПараметрыЗаписиJSON - Структура - параметры, используемые при записи объекта JSON.
//                                         См. в синтаксис-помощнике описание ПараметрыЗаписиJSON.
//      *Данные - Структура, Соответствие - поля формы, которые необходимо отправить в запрос:
//          *<Ключ> - Строка - имя поля.
//          *<Значение> - Строка - значение поля.
//      *Файлы - Структура, Массив - файлы, которые необходимо отправить в запросе:
//          *Имя - Строка - имя поля формы.
//          *Данные - ДвоичныеДанные - двоичные данные файла.
//          *ИмяФайла - Строка - имя файла.
//          *Тип - Строка - MIME-тип файла.
//          *Заголовки - Соответствие, Неопределено - HTTP заголовки запроса.
//
// Возвращаемое значение:
//   Структура - ответ на выполненный запрос:
//      *ВремяВыполнения - Число - время выполнения запроса в миллисекундах.
//      *Cookies - Соответствие - cookies полученные с сервера.
//      *Заголовки - Соответствие - HTTP заголовки ответа.
//      *ЭтоПостоянныйРедирект - Булево - признак постоянного редиректа.
//      *ЭтоРедирект - Булево - признак редиректа.
//      *Кодировка - Строка - кодировка текста ответа.
//      *Тело - ДвоичныеДанные - тело ответа.
//      *КодСостояния - Число - код состояния ответа.
//      *URL - Строка - итоговый URL, по которому был выполнен запрос.
// 
Функция ВызватьМетодВСеансе(Сессия, Метод, URL, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ВызватьHTTPМетод(Сессия, Метод, URL, Неопределено, Неопределено, Неопределено, ДополнительныеПараметры);	
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВызватьHTTPМетод(Сессия, Метод, URL, Данные, Json, ПараметрыЗапроса, ДополнительныеПараметры)
	Возврат Устарела_ВызватьHTTPМетод(Сессия, Метод, URL, Данные, Json, ПараметрыЗапроса, ДополнительныеПараметры)
КонецФункции

Функция Устарела_ВызватьHTTPМетод(Сессия, Метод, URL, Данные, Json, ПараметрыЗапроса, ДополнительныеПараметры)
	
	Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура") Тогда
		ДополнительныеПараметры = Новый Структура;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Сессия) Тогда
		Сессия = СоздатьСессию();
	КонецЕсли;
	
	Запрос = Новый Структура;
	Запрос.Вставить("Метод", ВРег(Метод));
	Запрос.Вставить("URL", URL);
	Запрос.Вставить("Заголовки", ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "Заголовки", Новый Соответствие));
	Запрос.Вставить("Файлы", ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "Файлы", Новый Массив));
	Запрос.Вставить("Данные", Данные);
	Запрос.Вставить("Json", Json);
	Запрос.Вставить("ПараметрыЗапроса", ВыбратьЗначение(ПараметрыЗапроса, ДополнительныеПараметры, "ПараметрыЗапроса", Новый Структура));
	Запрос.Вставить("Аутентификация", ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "Аутентификация", Новый Структура));
	Запрос.Вставить("Cookies", ВыбратьЗначение(Неопределено, ДополнительныеПараметры, "Cookies", Новый Массив));	
	
	ПодготовленныйЗапрос = ПодготовитьЗапрос(Сессия, Запрос);
	
	РазрешитьПеренаправление = ?(ДополнительныеПараметры.Свойство("РазрешитьПеренаправление"), ДополнительныеПараметры.РазрешитьПеренаправление, ВРег(Метод) <> "HEAD");	
	
	Настройки = Новый Структура;
	Настройки.Вставить("Таймаут", Таймаут);
	Настройки.Вставить("РазрешитьПеренаправление", РазрешитьПеренаправление);
	Настройки.Вставить("ПроверятьSSL", ?(ДополнительныеПараметры.Свойство("ПроверятьSSL"), ДополнительныеПараметры.ПроверятьSSL, Истина));
	Настройки.Вставить("КлиентскийСертификатSSL", ?(ДополнительныеПараметры.Свойство("КлиентскийСертификатSSL"), ДополнительныеПараметры.КлиентскийСертификатSSL, Неопределено));
	Настройки.Вставить("Прокси", ?(ДополнительныеПараметры.Свойство("Прокси"), ДополнительныеПараметры.Прокси, ПолучитьПроксиПоУмолчанию(ПодготовленныйЗапрос.URL)));
	
	Возврат ОтправитьЗапрос(Сессия, ПодготовленныйЗапрос, Настройки);
	//Ответ = ОтправитьЗапрос(Сессия, ПодготовленныйЗапрос, Настройки);
	
	//Перенаправление = 0;
	//Пока Перенаправление < Сессия.МаксимальноеКоличествоПеренаправлений Цикл
	//	Если Не Настройки.РазрешитьПеренаправление ИЛИ Не Ответ.ЭтоРедирект Тогда
	//		Возврат Ответ;
	//	КонецЕсли;
	//	
	//	НовыйURL = ПолучитьЗначениеЗаголовка("location", Ответ.Заголовки);
	//	НовыйURL = РаскодироватьСтроку(НовыйURL, СпособКодированияСтроки.URLВКодировкеURL);
	//	
	//	// Редирект без схемы
	//	Если СтрНачинаетсяС(НовыйURL, "//") Тогда
	//		СтруктураURL = РазобратьURL(Ответ.URL);
	//		НовыйURL = СтруктураURL.Схема + ":" + НовыйURL;
	//	КонецЕсли;
	//	
	//	СтруктураURL = РазобратьURL(НовыйURL);
	//	Если Не ЗначениеЗаполнено(СтруктураURL.Сервер) Тогда
	//		СтруктураURLОтвета = РазобратьURL(Ответ.URL);
	//		БазовыйURL = СтрШаблон("%1://%2", СтруктураURLОтвета.Схема, СтруктураURLОтвета.Сервер);
	//		Если ЗначениеЗаполнено(СтруктураURLОтвета.Порт) Тогда
	//			БазовыйURL = БазовыйURL + Формат(СтруктураURLОтвета.Порт, "ЧРГ=; ЧГ=");
	//		КонецЕсли;
	//		НовыйURL = БазовыйURL + НовыйURL;
	//	КонецЕсли;
	//	ПодготовленныйЗапрос.URL = КодироватьСтроку(НовыйURL, СпособКодированияСтроки.URLВКодировкеURL);
	//	ПодготовленныйЗапрос.HTTPЗапрос.АдресРесурса = СобратьАдресРесурса(РазобратьURL(НовыйURL), Неопределено);
	//	
	//	Если Ответ.КодСостояния = 301 И ПодготовленныйЗапрос.Метод <> "HEAD" И ПодготовленныйЗапрос.Метод <> "GET" Тогда
	//		Возврат Ответ;
	//	КонецЕсли;
	//	
	//	ПереопределитьМетод(ПодготовленныйЗапрос, Ответ);	
	//		
	//	// https://github.com/requests/requests/issues/1084
	//	Если Ответ.КодСостояния <> 307 И Ответ.КодСостояния <> 308 Тогда
	//		// https://github.com/requests/requests/issues/3490
	//		ПодготовленныйЗапрос.HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(Base64Значение(""));
	//		ЗаголовкиДляУдаления = Новый Массив;
	//		Заголовки = СтрРазделить("content-length,content-type,transfer-encoding", ",", Ложь);
	//		Для Каждого Заголовок Из ПодготовленныйЗапрос.Заголовки Цикл
	//			Если Заголовки.Найти(НРег(Заголовок.Ключ)) <> Неопределено Тогда
	//				ЗаголовкиДляУдаления.Добавить(Заголовок.Ключ);
	//			КонецЕсли;
	//		КонецЦикла;
	//		Для Каждого ЗаголовокДляУдаления Из ЗаголовкиДляУдаления Цикл
	//			ПодготовленныйЗапрос.Заголовки.Удалить(ЗаголовокДляУдаления);
	//		КонецЦикла;
	//	    ПодготовленныйЗапрос.HTTPЗапрос.Заголовки = ПодготовленныйЗапрос.Заголовки;
	//	КонецЕсли;
	//	Для Каждого Заголовок Из ПодготовленныйЗапрос.Заголовки Цикл
	//		Если НРег(Заголовок.Ключ) = "cookie" Тогда
	//			ПодготовленныйЗапрос.Заголовки.Удалить(Заголовок.Ключ);
	//			Прервать;
	//		КонецЕсли;
	//	КонецЦикла;
	//	ПодготовленныйЗапрос.Cookies = ОбъединитьCookies(Сессия.Cookies, ПодготовленныйЗапрос.Cookies);
	//	ПодготовитьCookies(ПодготовленныйЗапрос);
	//	
	//	// INFO: по хорошему аутентификацию нужно привести к новых параметрам, но пока будем игнорировать.
	//	
	//	Ответ = ОтправитьЗапрос(Сессия, ПодготовленныйЗапрос, Настройки);
	//	
	//	Перенаправление = Перенаправление + 1;
	//КонецЦикла;
	//
	//ВызватьИсключение("СлишкомМногоПеренаправлений");
	
КонецФункции

Функция ПолучитьПроксиПоУмолчанию(URL)
	
	ПроксиПоУмолчанию = Новый ИнтернетПрокси;
	Если Метаданные.ОбщиеМодули.Найти("ПолучениеФайловИзИнтернетаКлиентСервер") = Неопределено Тогда
		ПолучениеФайловИзИнтернетаКлиентСервер = Неопределено;
	Иначе
		СтруктураURL = РазобратьURL(URL);
		ПроксиПоУмолчанию = ПолучениеФайловИзИнтернетаКлиентСервер.ПолучитьПрокси(СтруктураURL.Схема);
	КонецЕсли;
	
	Возврат ПроксиПоУмолчанию;
	
КонецФункции

Функция ПодготовитьЗапрос(Сессия, Запрос)
	
	Cookies = ОбъединитьCookies(ДозаполнитьCookie(Сессия.Cookies, Запрос.URL), ДозаполнитьCookie(Запрос.Cookies, Запрос.URL));
	
	ПодготовленныйЗапрос = Новый Структура;
	ПодготовленныйЗапрос.Вставить("Cookies", Cookies);
	ПодготовленныйЗапрос.Вставить("Аутентификация", ОбъединитьПараметрыАутентификации(Запрос.Аутентификация, Сессия.Аутентификация));
	ПодготовленныйЗапрос.Вставить("Метод", Запрос.Метод);
	ПодготовленныйЗапрос.Вставить("Заголовки", ОбъединитьЗаголовки(Запрос.Заголовки, Сессия.Заголовки));
	ПараметрыЗапроса = ОбъединитьПараметрыЗапроса(Запрос.ПараметрыЗапроса, Сессия.ПараметрыЗапроса);
	ПодготовленныйЗапрос.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	ПодготовленныйЗапрос.Вставить("URL", ПодготовитьURL(Запрос.URL, ПараметрыЗапроса));
	
	ПодготовитьCookies(ПодготовленныйЗапрос);
	ПодготовитьТелоЗапроса(
		ПодготовленныйЗапрос,
		Запрос.Данные,
		Запрос.Файлы,
		Запрос.Json);
	ПодготовитьАутентификацию(ПодготовленныйЗапрос);

	Возврат ПодготовленныйЗапрос;
	
КонецФункции

Функция ДозаполнитьCookie(Cookies, URL)
	
	СтруктураURL = РазобратьURL(URL);
	НовыеCookies = Новый Массив;
	Если ТипЗнч(Cookies) = Тип("Массив") Тогда
		Для Каждого Cookie Из Cookies Цикл
			НовыйCookie = КонструкторCookie(Cookie.Наименование, Cookie.Значение);
			ЗаполнитьЗначенияСвойств(НовыйCookie, Cookie);
			
			Если Не ЗначениеЗаполнено(НовыйCookie.Домен) Тогда
				НовыйCookie.Домен = СтруктураURL.Сервер;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(НовыйCookie.Путь) Тогда
				НовыйCookie.Путь = "/";
			КонецЕсли;
			
			НовыеCookies.Добавить(НовыйCookie);
		КонецЦикла;
		
		Возврат НовыеCookies;
	КонецЕсли;
	
	Возврат Cookies;
	
КонецФункции

Процедура ДобавитьCookieВХранилище(ХранилищеCookies, Cookie, Замещать = Ложь)
	
	Если ХранилищеCookies.Получить(Cookie.Домен) = Неопределено Тогда
		ХранилищеCookies[Cookie.Домен] = Новый Соответствие;
	КонецЕсли;
	Если ХранилищеCookies[Cookie.Домен].Получить(Cookie.Путь) = Неопределено Тогда
		ХранилищеCookies[Cookie.Домен][Cookie.Путь] = Новый Соответствие;
	КонецЕсли;
	Если ХранилищеCookies[Cookie.Домен][Cookie.Путь].Получить(Cookie.Наименование) = Неопределено ИЛИ Замещать Тогда
		ХранилищеCookies[Cookie.Домен][Cookie.Путь][Cookie.Наименование] = Cookie;
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьЛидирующуюТочку(Знач Домен)
	
	Если Не СтрНачинаетсяС(Домен, ".") Тогда
		Домен = "." + Домен;
	КонецЕсли;
	
	Возврат Домен;
	
КонецФункции

Функция ОтобратьCookiesДляЗапроса(СтруктураURL, Cookies)
	
	СерверВЗапросе = ДобавитьЛидирующуюТочку(СтруктураURL.Сервер);
	
	Результат = Новый Массив;
	Для Каждого Домен Из Cookies Цикл
		ДоменВCookie = ДобавитьЛидирующуюТочку(Домен.Ключ);
		Если Не СтрЗаканчиваетсяНа(СерверВЗапросе, Домен.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого Путь Из Домен.Значение Цикл
			Если Не СтрНачинаетсяС(СтруктураURL.Путь, Путь.Ключ) Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого Наименование Из Путь.Значение Цикл
				Если Наименование.Значение.ТолькоБезопасноеСоединение = Истина И СтруктураURL.Схема <> "https" Тогда
					Продолжить;
				КонецЕсли;
				// INFO: проверка срока действия игнорируется (Наименование.Значение.СрокДействия)
				Если ЗначениеЗаполнено(Наименование.Значение.Порт) Тогда
					// INFO: проверка порта игнорируется
				КонецЕсли;
				
				Результат.Добавить(Наименование.Значение);
			КонецЦикла;
		КонецЦикла;		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьЗаголовокCookie(ПодготовленныйЗапрос)
	
	СтруктураURL = РазобратьURL(ПодготовленныйЗапрос.URL);
	
	Заголовок = "";
	Cookies = Новый Массив;
	Для Каждого Cookie Из ОтобратьCookiesДляЗапроса(СтруктураURL, ПодготовленныйЗапрос.Cookies) Цикл
		Cookies.Добавить(СтрШаблон("%1=%2", Cookie.Наименование, Cookie.Значение));	
	КонецЦикла;
	
	Возврат СтрСоединить(Cookies, "; ");
	
КонецФункции

Процедура ПодготовитьCookies(ПодготовленныйЗапрос)
	
	ЗаголовокCookie = ПодготовитьЗаголовокCookie(ПодготовленныйЗапрос);
	Если ЗначениеЗаполнено(ЗаголовокCookie) Тогда
		ПодготовленныйЗапрос.Заголовки["Cookie"] = ЗаголовокCookie;
	КонецЕсли;
	
КонецПроцедуры

Функция КодироватьПараметрыЗапроса(ПараметрыЗапроса)
	
	ЧастиПараметрыЗапроса = Новый Массив;
	Для Каждого Параметр Из ПараметрыЗапроса Цикл
		Если ТипЗнч(Параметр.Значение) = Тип("Массив") Тогда
			Значения = Параметр.Значение;
		Иначе
			Значения = Новый Массив;
			Значения.Добавить(Параметр.Значение);
		КонецЕсли;
		
		Для Каждого Значение Из Значения Цикл
			ЗначениеПараметра = КодироватьСтроку(Значение, СпособКодированияСтроки.URLВКодировкеURL);
			ЧастиПараметрыЗапроса.Добавить(СтрШаблон("%1=%2", Параметр.Ключ, ЗначениеПараметра));
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиПараметрыЗапроса, "&");
	
КонецФункции

Функция ПодготовитьURL(Знач URL, ПараметрыЗапроса = Неопределено)
	
	URL = СокрЛ(URL);
	
	СтруктураURL = РазобратьURL(URL);
	
	ПодготовленныйURL = СтруктураURL.Схема + "://";
	Если ЗначениеЗаполнено(СтруктураURL.Аутентификация.Пользователь) Тогда
		ПодготовленныйURL = ПодготовленныйURL 
			+ СтруктураURL.Аутентификация.Пользователь + ":"
			+ СтруктураURL.Аутентификация.Пароль + "@";
	КонецЕсли;
	ПодготовленныйURL = ПодготовленныйURL + СтруктураURL.Сервер;
	Если ЗначениеЗаполнено(СтруктураURL.Порт) Тогда
		ПодготовленныйURL = ПодготовленныйURL + ":" + Формат(СтруктураURL.Порт, "ЧРГ=; ЧГ=");
	КонецЕсли;
	
	ПодготовленныйURL = ПодготовленныйURL + СобратьАдресРесурса(СтруктураURL, ПараметрыЗапроса);
		
	Возврат ПодготовленныйURL;
	
КонецФункции

Функция ЗаголовкиВСтроку(Заголовки)
	
	РазделительСтрок = Символы.ВК + Символы.ПС;
	Строки = Новый Массив;
	
	СортированныеЗаголовки = "Content-Disposition,Content-Type,Content-Location";
	Для Каждого Ключ Из СтрРазделить(СортированныеЗаголовки, ",") Цикл
		Значение = ПолучитьЗначениеЗаголовка(Ключ, Заголовки);
		Если Значение <> Ложь И ЗначениеЗаполнено(Значение) Тогда
			Строки.Добавить(СтрШаблон("%1: %2", Ключ, Значение));
		КонецЕсли;
	КонецЦикла;
	
	Ключи = СтрРазделить(ВРег(СортированныеЗаголовки), ",");
	Для Каждого Заголовок Из Заголовки Цикл
		Если Ключи.Найти(ВРег(Заголовок.Ключ)) = Неопределено Тогда
			Строки.Добавить(СтрШаблон("%1: %2", Заголовок.Ключ, Заголовок.Значение));
		КонецЕсли;
	КонецЦикла;
	Строки.Добавить(РазделительСтрок);
	
	Возврат СтрСоединить(Строки, РазделительСтрок);
	
КонецФункции

Функция ПолучитьЗначениеПоКлючу(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено)
	
	Значение = ЗначениеПоУмолчанию;
	Если ТипЗнч(Структура) = Тип("Структура") И Структура.Свойство(Ключ) Тогда
		Значение = Структура[Ключ];
	ИначеЕсли ТипЗнч(Структура) = Тип("Соответствие") И Структура.Получить(Ключ) <> Неопределено Тогда
		Значение = Структура.Получить(Ключ);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции
	
Функция СоздатьПолеФормы(ИсходныеПараметры)
	
	Поле = Новый Структура("Имя,ИмяФайла,Данные,Тип,Заголовки");
	Поле.Имя = ИсходныеПараметры.Имя;                   
	Поле.Данные = ИсходныеПараметры.Данные;
	
	Поле.Тип = ПолучитьЗначениеПоКлючу(ИсходныеПараметры, "Тип");
	Поле.Заголовки = ПолучитьЗначениеПоКлючу(ИсходныеПараметры, "Заголовки", Новый Соответствие);
	Поле.ИмяФайла = ПолучитьЗначениеПоКлючу(ИсходныеПараметры, "ИмяФайла");
	
	Ключ = "Content-Disposition";
	Если ПолучитьЗначениеЗаголовка("content-disposition", Поле.Заголовки, Ключ) = Ложь Тогда
		Поле.Заголовки.Вставить("Content-Disposition", "form-data");	
	КонецЕсли;
	
	Части = Новый Массив;
	Части.Добавить(Поле.Заголовки[Ключ]);
	Части.Добавить(СтрШаблон("name=""%1""", Поле.Имя));
	Если ЗначениеЗаполнено(Поле.ИмяФайла) Тогда
		Части.Добавить(СтрШаблон("filename=""%1""", Поле.ИмяФайла));
	КонецЕсли;
	
	Поле.Заголовки[Ключ] = СтрСоединить(Части, "; ");
	Поле.Заголовки["Content-Type"] = Поле.Тип;
	
	Возврат Поле;
	
КонецФункции

Функция ЗакодироватьФайлы(HTTPЗапрос, Файлы, Данные)
	
	Части = Новый Массив;
	Если ЗначениеЗаполнено(Данные) Тогда
		Для Каждого Поле Из Данные Цикл
			Части.Добавить(СоздатьПолеФормы(Новый Структура("Имя,Данные", Поле.Ключ, Поле.Значение)));
		КонецЦикла;
	КонецЕсли;
	Если ТипЗнч(Файлы) = Тип("Массив") Тогда
		Для Каждого Файл Из Файлы Цикл
			Части.Добавить(СоздатьПолеФормы(Файл));
		КонецЦикла;
	Иначе
		Части.Добавить(СоздатьПолеФормы(Файлы));
	КонецЕсли;
	
	Разделитель = СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	РазделительСтрок = Символы.ВК + Символы.ПС;
	
	ЗаписьДанных = Новый ЗаписьДанных(
		HTTPЗапрос.ПолучитьТелоКакПоток(),
		КодировкаТекста.UTF8,
		ПорядокБайтов.LittleEndian,
		"",
		"",
		Ложь);
	Для Каждого Часть Из Части Цикл
		ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + РазделительСтрок);
		ЗаписьДанных.ЗаписатьСтроку(ЗаголовкиВСтроку(Часть.Заголовки));
		Если ТипЗнч(Часть.Данные) = Тип("ДвоичныеДанные") Тогда
			ЗаписьДанных.Записать(Часть.Данные);
		Иначе
			ЗаписьДанных.ЗаписатьСтроку(Часть.Данные);
		КонецЕсли;
		ЗаписьДанных.ЗаписатьСтроку(РазделительСтрок);		
	КонецЦикла;
	ЗаписьДанных.ЗаписатьСтроку("--" + Разделитель + "--" + РазделительСтрок);
	ЗаписьДанных.Закрыть();
	
	Возврат СтрШаблон("multipart/form-data; boundary=%1", Разделитель);
	
КонецФункции

Процедура ПодготовитьТелоЗапроса(ПодготовленныйЗапрос, Данные, Файлы, Json)
	
	HTTPЗапрос = Новый HTTPЗапрос;
	HTTPЗапрос.АдресРесурса = СобратьАдресРесурса(
		РазобратьURL(ПодготовленныйЗапрос.URL), 
		ПодготовленныйЗапрос.ПараметрыЗапроса);
	Если ЗначениеЗаполнено(Файлы) Тогда
		ContentType = ЗакодироватьФайлы(HTTPЗапрос, Файлы, Данные);
	ИначеЕсли ЗначениеЗаполнено(Данные) Тогда
		ContentType = "application/json";
		HTTPЗапрос.УстановитьТелоИзСтроки(				
			Данные,				
			КодировкаТекста.UTF8, 
			ИспользованиеByteOrderMark.НеИспользовать);	
	ИначеЕсли ЗначениеЗаполнено(Json) Тогда
		ContentType = "application/json";
		HTTPЗапрос.УстановитьТелоИзСтроки(
			леРаботаСJSON.ДанныеВJSON(Json));
	КонецЕсли;
	ЗначениеЗаголовка = ПолучитьЗначениеЗаголовка("content-type", ПодготовленныйЗапрос.Заголовки);
	Если ЗначениеЗаголовка = Ложь И ЗначениеЗаполнено(ContentType) Тогда
		ПодготовленныйЗапрос.Заголовки.Вставить("Content-Type", ContentType);
	КонецЕсли;
	
	HTTPЗапрос.Заголовки = ПодготовленныйЗапрос.Заголовки;
	ПодготовленныйЗапрос.Вставить("HTTPЗапрос", HTTPЗапрос);
	
КонецПроцедуры

Процедура ПодготовитьАутентификацию(ПодготовленныйЗапрос)
	
	ПодготовленныйЗапрос.Вставить("СобытияНаОтвет", Новый Массив);
	Если Не ЗначениеЗаполнено(ПодготовленныйЗапрос.Аутентификация) Тогда
		СтруктураURL = РазобратьURL(ПодготовленныйЗапрос.URL);
		Если ЗначениеЗаполнено(СтруктураURL.Аутентификация) Тогда
			ПодготовленныйЗапрос.Аутентификация = СтруктураURL.Аутентификация;	
		КонецЕсли;		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПодготовленныйЗапрос.Аутентификация) Тогда
		Если ПодготовленныйЗапрос.Аутентификация.Свойство("Тип") 
			И НРег(ПодготовленныйЗапрос.Аутентификация.Тип) = "digest" Тогда
			ПодготовленныйЗапрос.СобытияНаОтвет.Добавить("ОбработкаОтветаСКодом401");	
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъединитьCookies(ГлавныйИсточник, ДополнительныйИсточник)
	
	Cookies = Новый Соответствие;
	Для Каждого Cookie Из ПреобразоватьХранилищеCookiesВМассивCookies(ГлавныйИсточник) Цикл
		ДобавитьCookieВХранилище(Cookies, Cookie, Ложь);
	КонецЦикла;
	Для Каждого Cookie Из ПреобразоватьХранилищеCookiesВМассивCookies(ДополнительныйИсточник) Цикл
		ДобавитьCookieВХранилище(Cookies, Cookie, Ложь);
	КонецЦикла;
	
	Возврат Cookies;
	
КонецФункции

Функция ПреобразоватьХранилищеCookiesВМассивCookies(ХранилищеCookies)
	
	Cookies = Новый Массив;
	Если ТипЗнч(ХранилищеCookies) = Тип("Массив") Тогда
		Для Каждого Cookie Из ХранилищеCookies Цикл
			НоваяCookie = КонструкторCookie();
			ЗаполнитьЗначенияСвойств(НоваяCookie, Cookie);
			Cookies.Добавить(НоваяCookie);
		КонецЦикла;
		
		Возврат Cookies;
	КонецЕсли;
	
	Для Каждого Домен Из ХранилищеCookies Цикл
		Для Каждого Путь Из Домен.Значение Цикл
			Для Каждого Наименование Из Путь.Значение Цикл
				Cookies.Добавить(Наименование.Значение);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Cookies;
	
КонецФункции

Функция ОбъединитьПараметрыАутентификации(ГлавныйИсточник, ДополнительныйИсточник)
	
	ПараметрыАутентификации = Новый Структура;
	Если ТипЗнч(ГлавныйИсточник) = Тип("Структура") Тогда
		Для Каждого Параметр Из ГлавныйИсточник Цикл
			ПараметрыАутентификации.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
	Если ТипЗнч(ДополнительныйИсточник) = Тип("Структура") Тогда
		Для Каждого Параметр Из ДополнительныйИсточник Цикл
			Если Не ПараметрыАутентификации.Свойство(Параметр) Тогда
				ПараметрыАутентификации.Вставить(Параметр.Ключ, Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыАутентификации;
	
КонецФункции

Функция ОбъединитьЗаголовки(ГлавныйИсточник, ДополнительныйИсточник)
	
	Заголовки = Новый Соответствие;
	Для Каждого Заголовок Из ГлавныйИсточник Цикл
		Заголовки.Вставить(Заголовок.Ключ, Заголовок.Значение);
	КонецЦикла;
	Для Каждого Заголовок Из ДополнительныйИсточник Цикл
		Если Заголовки.Получить(Заголовок.Ключ) = Неопределено Тогда
			Заголовки.Вставить(Заголовок.Ключ, Заголовок.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Заголовки;
	
КонецФункции

Функция ОбъединитьПараметрыЗапроса(ГлавныйИсточник, ДополнительныйИсточник)
	
	ПараметрыЗапроса = Новый Соответствие;
	Если ТипЗнч(ГлавныйИсточник) = Тип("Структура") ИЛИ ТипЗнч(ГлавныйИсточник) = Тип("Соответствие") Тогда
		Для Каждого Параметр Из ГлавныйИсточник Цикл
			ПараметрыЗапроса.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;
	КонецЕсли;
	Если ТипЗнч(ДополнительныйИсточник) = Тип("Структура") ИЛИ ТипЗнч(ДополнительныйИсточник) = Тип("Соответствие") Тогда
		Для Каждого Параметр Из ДополнительныйИсточник Цикл
			Если ПараметрыЗапроса.Получить(Параметр) = Неопределено Тогда
				ПараметрыЗапроса.Вставить(Параметр.Ключ, Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

Функция ОтправитьHTTPЗапрос(Сессия, ПодготовленныйЗапрос, Настройки)
	
	Соединение = ПолучитьСоединение(РазобратьURL(ПодготовленныйЗапрос.URL), ПодготовленныйЗапрос.Аутентификация, Настройки);
	Ответ = Соединение.ВызватьHTTPМетод(ПодготовленныйЗапрос.Метод, ПодготовленныйЗапрос.HTTPЗапрос);
	
	Для Каждого Обработчик Из ПодготовленныйЗапрос.СобытияНаОтвет Цикл
		Если Обработчик = "ОбработкаОтветаСКодом401" Тогда
			ОбработкаОтветаСКодом401(Сессия, ПодготовленныйЗапрос, Настройки, Ответ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ответ;
	
КонецФункции

Функция ОтправитьЗапрос(Сессия, ПодготовленныйЗапрос, Настройки)
	
	Начало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Ответ = ОтправитьHTTPЗапрос(Сессия, ПодготовленныйЗапрос, Настройки);
	
	ПодготовленныйОтвет = Новый Структура;
	ПодготовленныйОтвет.Вставить("ВремяВыполнения", ТекущаяУниверсальнаяДатаВМиллисекундах() - Начало);
	ПодготовленныйОтвет.Вставить("Cookies", ИзвлечьCookies(Ответ.Заголовки, ПодготовленныйЗапрос.URL)); 
	ПодготовленныйОтвет.Вставить("Заголовки", Ответ.Заголовки);
	ПодготовленныйОтвет.Вставить("ЭтоПостоянныйРедирект", ЭтоПостоянныйРедирект(Ответ.КодСостояния, Ответ.Заголовки));
	ПодготовленныйОтвет.Вставить("ЭтоРедирект", ЭтоРедирект(Ответ.КодСостояния, Ответ.Заголовки));
	ПодготовленныйОтвет.Вставить("Кодировка", ПолучитьКодировкуИзЗаголовков(Ответ.Заголовки));
	ПодготовленныйОтвет.Вставить("Тело", Ответ.ПолучитьТелоКакДвоичныеДанные());
	ПодготовленныйОтвет.Вставить("КодСостояния", Ответ.КодСостояния);
	ПодготовленныйОтвет.Вставить("URL", ПодготовленныйЗапрос.URL);
	ПодготовленныйОтвет.Вставить("Ответ", Ответ);
	
	КодОтвета = Ответ.КодСостояния;
	ОтветСервера.Вставить("КодОтвета", Ответ.КодСостояния);
	Если ФорматОтвета = ФорматыОтветов().Текст Тогда
		ОтветСервера.Вставить("Тело", Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	Сессия.Cookies = ОбъединитьCookies(Сессия.Cookies, ПодготовленныйОтвет.Cookies);
	
	Возврат ПодготовленныйОтвет;
	
КонецФункции

Процедура ПереопределитьМетод(ПодготовленныйЗапрос, Ответ)
	
	Метод = ПодготовленныйЗапрос.Метод;

	// http://tools.ietf.org/html/rfc7231#section-6.4.4
	Если Ответ.КодСостояния = 303 И Метод <> "HEAD" Тогда
		Метод = "GET";
	КонецЕсли;
	
	// Поведение браузеров
	Если Ответ.КодСостояния = 302 И Метод <> "HEAD" Тогда
		Метод = "GET";
	КонецЕсли;
	
	ПодготовленныйЗапрос.Метод = Метод;
	
КонецПроцедуры	

Функция ИзвлечьCookies(Заголовки, URL)
	
	Cookies = Новый Соответствие;
	Для Каждого ОчереднойЗаголовок Из Заголовки Цикл
		Если НРег(ОчереднойЗаголовок.Ключ) = "set-cookie" Тогда
			Для Каждого ЗаголовокCookie Из РазбитьНаОтдельныеЗаголовкиCookies(ОчереднойЗаголовок.Значение) Цикл
				Cookie = РаспарситьCookie(ЗаголовокCookie, URL);
				ДобавитьCookieВХранилище(Cookies, Cookie);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Cookies;
	
КонецФункции

Функция РазбитьНаОтдельныеЗаголовкиCookies(Знач Заголовок)
	
	Заголовки = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Заголовок) Тогда
		Возврат Заголовки;
	КонецЕсли;
	
	ЗапчастиЗаголовков = СтрРазделить(Заголовок, ",", Ложь);
	
	ОтдельныйЗаголовок = ЗапчастиЗаголовков[0];
	Для Индекс = 1 По ЗапчастиЗаголовков.ВГраница() Цикл
		ТочкаяСЗапятой = СтрНайти(ЗапчастиЗаголовков[Индекс], ";");
		Равно = СтрНайти(ЗапчастиЗаголовков[Индекс], "=");
		Если ТочкаяСЗапятой И Равно И Равно < ТочкаяСЗапятой Тогда
			Заголовки.Добавить(ОтдельныйЗаголовок);
			ОтдельныйЗаголовок = ЗапчастиЗаголовков[Индекс];
		Иначе
			ОтдельныйЗаголовок = ОтдельныйЗаголовок + ЗапчастиЗаголовков[Индекс];
		КонецЕсли;
	КонецЦикла;
	Заголовки.Добавить(ОтдельныйЗаголовок);	
	
	Возврат Заголовки;
	
КонецФункции

Функция КонструкторCookie(Наименование = "", Значение = Неопределено)
	
	Возврат Новый Структура(
		"Наименование, Значение, Домен, Путь, Порт, СрокДействия, ТолькоБезопасноеСоединение", 
		Наименование, 
		Значение,
		"",
		"");
	
КонецФункции

Функция РаспарситьCookie(Заголовок, URL)
	
	Cookie = КонструкторCookie();
	Индекс = 0;
	
	Для Каждого Параметр Из СтрРазделить(Заголовок, ";", Ложь) Цикл
		Индекс = Индекс + 1;
		Параметр = СокрЛП(Параметр);
		
		Если Индекс = 1 Тогда
			Части = СтрРазделить(Параметр, "=", Ложь);
			Если НЕ ЗначениеЗаполнено(Части[0]) Тогда
				Возврат Cookie;                                           
			КонецЕсли;
			Cookie.Наименование = Части[0];
			Если Части.Количество() > 1 Тогда
				Cookie.Значение = Части[1];
			КонецЕсли;		
			Продолжить;	
		КонецЕсли;
		
		Если СтрНайти(Параметр, "=") Тогда
			Части = СтрРазделить(Параметр, "=", Ложь);
			Ключ = НРег(Части[0]);
			Значение = Части[1];
		Иначе
			Ключ = НРег(Параметр);
		КонецЕсли;
		
		
		Если Ключ = "domain" Тогда
			Cookie.Домен = Значение;
		ИначеЕсли Ключ = "path" Тогда
			Cookie.Путь = Значение;
		ИначеЕсли Ключ = "secure" Тогда
			Cookie.ТолькоБезопасноеСоединение = Истина;
		Иначе
			Продолжить; // INFO: другие параметры пока игнорируются
		КонецЕсли; 
	КонецЦикла;
	
	СтруктураURL = РазобратьURL(URL);
	Если Не ЗначениеЗаполнено(Cookie.Домен) Тогда
		Cookie.Домен = СтруктураURL.Сервер;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Cookie.Порт) И ЗначениеЗаполнено(СтруктураURL.Порт) Тогда
		Cookie.Порт = СтруктураURL.Порт;
	КонецЕсли;
	
	Возврат Cookie;
	
КонецФункции

Функция ПолучитьЗначениеЗаголовка(Заголовок, ВсеЗаголовки, Ключ = Неопределено)
	
	Для Каждого ОчереднойЗаголовок Из ВсеЗаголовки Цикл
		Если НРег(ОчереднойЗаголовок.Ключ) = НРег(Заголовок) Тогда
			Ключ = ОчереднойЗаголовок.Ключ;
			Возврат ОчереднойЗаголовок.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоПостоянныйРедирект(КодСостояния, Заголовки)
	
	Возврат ЕстьЗаголовокLocation(Заголовки) И (КодСостояния = 301 ИЛИ КодСостояния = 308);
	
КонецФункции

Функция ЭтоРедирект(КодСостояния, Заголовки)
	
	СостоянияРедиректа = Новый Массив;
	СостоянияРедиректа.Добавить(301);
	СостоянияРедиректа.Добавить(302);
	СостоянияРедиректа.Добавить(303);
	СостоянияРедиректа.Добавить(307);
	СостоянияРедиректа.Добавить(308);
	
	Возврат ЕстьЗаголовокLocation(Заголовки) И СостоянияРедиректа.Найти(КодСостояния) <> Неопределено;
	
КонецФункции

Функция ЕстьЗаголовокLocation(Заголовки)
	
	Возврат ПолучитьЗначениеЗаголовка("location", Заголовки) <> Ложь;
	
КонецФункции

Функция ПолучитьКодировкуИзЗаголовков(Заголовки)
	
	Значение = ПолучитьЗначениеЗаголовка("content-type", Заголовки);
	
	Если Значение = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Опции = Новый Соответствие;
	ТипСодержимого = Неопределено;
	
	Значение = ";" + Значение;
	Пока Сред(Значение, 1, 1) = ";" Цикл
		Значение = Сред(Значение, 2);
		Конец = СтрНайти(Значение, ";");
		Пока Конец И (СтрСчитать(Значение, """", 1, Конец) - СтрСчитать(Значение, "\""", 1, Конец)) % 2 Цикл
			Конец = СтрНайти(Значение, ";", НаправлениеПоиска.СНачала, Конец + 1);	
		КонецЦикла;
		Если Конец = 0 Тогда
			Конец = СтрДлина(Значение) + 1;
		КонецЕсли;
		ЧастьСтрока = Сред(Значение, 1, Конец - 1);
		Значение = Сред(Значение, Конец);	
		
		Если Не ЗначениеЗаполнено(ТипСодержимого) Тогда
			ТипСодержимого = ЧастьСтрока;
			Продолжить;
		КонецЕсли;
		
		Индекс = СтрНайти(ЧастьСтрока, "=");
		Если Индекс Тогда
			ИмяОпции = НРег(СокрЛП(Сред(ЧастьСтрока, 1, Индекс - 1)));
			Опция = СокрЛП(Сред(ЧастьСтрока, Индекс + 1));
			Если СтрДлина(Опция) >= 2 И Сред(Опция, 1, 1) = """" И Сред(Опция, СтрДлина(Опция) - 1) = """" Тогда
				Опция = Сред(Опция, 2, СтрДлина(Опция) - 2);
				Опция = СтрЗаменить(Опция, "\\", "\");
				Опция = СтрЗаменить(Опция, "\""", """");
			КонецЕсли;
			Опции[ИмяОпции] = Опция;
		КонецЕсли;
	КонецЦикла;
	
	Если Опции.Получить("charset") <> Неопределено Тогда
		Опция = Опции["charset"];
		Если (Сред(Опция, 1, 1) = """" И Сред(Опция, СтрДлина(Опция) - 1) = """")
			ИЛИ (Сред(Опция, 1, 1) = "'" И Сред(Опция, СтрДлина(Опция) - 1) = "'") Тогда
			Опция = Сред(Опция, 2, СтрДлина(Опция) - 2); 
		КонецЕсли;
		Возврат Опция;
	КонецЕсли;	
	Если СтрНайти(ТипСодержимого, "text") Тогда
		Возврат "ISO-8859-1";
	КонецЕсли;	
	
КонецФункции

Функция СтрСчитать(Строка, ЧтоСчитать, Начало, Конец)
	
	Возврат СтрЧислоВхождений(Сред(Строка, Начало, Конец), ЧтоСчитать);
	
КонецФункции

Функция СобратьАдресРесурса(СтруктураURL, ПараметрыЗапроса)
	
	АдресРесурса = СтруктураURL.Путь;
	
	ОбъединенныеПараметрыЗапроса = ОбъединитьПараметрыЗапроса(ПараметрыЗапроса, СтруктураURL.ПараметрыЗапроса);
	Если ЗначениеЗаполнено(ОбъединенныеПараметрыЗапроса) Тогда
		АдресРесурса = АдресРесурса + "?" + КодироватьПараметрыЗапроса(ОбъединенныеПараметрыЗапроса);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтруктураURL.Фрагмент) Тогда
		АдресРесурса = АдресРесурса + "#" + СтруктураURL.Фрагмент;
	КонецЕсли;
	
	Возврат АдресРесурса;
	
КонецФункции

Функция ПолучитьСоединение(ПараметрыСоединения, Аутентификация, ДополнительныеПараметры)
	
	ЗащищенноеСоединение = Неопределено;
	Если ПараметрыСоединения.Схема = "https" Тогда
		Если Не ЗначениеЗаполнено(ПараметрыСоединения.Порт) Тогда
			ПараметрыСоединения.Порт = 443;
		КонецЕсли;
		СертификатыУЦ = Новый СертификатыУдостоверяющихЦентровОС;
		Если ДополнительныеПараметры.ПроверятьSSL = Ложь Тогда
			СертификатыУЦ = Неопределено;
		ИначеЕсли ТипЗнч(ДополнительныеПараметры.ПроверятьSSL) = Тип("СертификатыУдостоверяющихЦентровФайл") Тогда
			СертификатыУЦ = ДополнительныеПараметры.ПроверятьSSL;
		КонецЕсли;
		КлиентскийСертификат = Неопределено;
		Если ДополнительныеПараметры.КлиентскийСертификатSSL = Тип("СертификатКлиентаФайл") 
			ИЛИ ДополнительныеПараметры.КлиентскийСертификатSSL = Тип("СертификатКлиентаWindows") Тогда
			КлиентскийСертификат = ДополнительныеПараметры.КлиентскийСертификатSSL;
		КонецЕсли;
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(КлиентскийСертификат, СертификатыУЦ);
	ИначеЕсли ПараметрыСоединения.Схема = "http" Тогда
		Если Не ЗначениеЗаполнено(ПараметрыСоединения.Порт) Тогда
			ПараметрыСоединения.Порт = 80;
		КонецЕсли;	
	КонецЕсли;
	
	Пользователь = "";
	Пароль = "";
	Если ЗначениеЗаполнено(Аутентификация) Тогда
		Если Не Аутентификация.Свойство("Тип") ИЛИ НРег(Аутентификация.Тип) = "basic" Тогда
			Пользователь = Аутентификация.Пользователь;
			Пароль = Аутентификация.Пароль;
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьАутентификациюОС = Аутентификация.Свойство("ИспользоватьАутентификациюОС") 
		И Аутентификация.ИспользоватьАутентификациюОС = Истина;
	
	Возврат Новый HTTPСоединение(
		ПараметрыСоединения.Сервер,
		ПараметрыСоединения.Порт,
		Пользователь, Пароль,
		ДополнительныеПараметры.Прокси, 
		ДополнительныеПараметры.Таймаут, 
		ЗащищенноеСоединение,
		ИспользоватьАутентификациюОС);	
	
КонецФункции

Функция ВыбратьЗначение(Значение1, Значение2, Ключ, ЗначениеПоУмолчанию)
	
	Если ЗначениеЗаполнено(Значение1) Тогда
		Возврат Значение1;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение2) И ЗначениеЗаполнено(Ключ) 
		И ТипЗнч(Значение2) = Тип("Структура")
		И Значение2.Свойство(Ключ) И ЗначениеЗаполнено(Значение2[Ключ]) Тогда
		Возврат Значение2[Ключ];
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

Функция РазделитьПоПервомуНайденномуРазделителю(Строка, Разделители)
	
	МинимальныйИндекс = СтрДлина(Строка);
	ПервыйРазделитель = "";
	
	Для Каждого Разделитель Из Разделители Цикл
		Индекс = СтрНайти(Строка, Разделитель);
		Если Индекс = 0 Тогда
			Продолжить;
		КонецЕсли;
		Если Индекс < МинимальныйИндекс Тогда
			МинимальныйИндекс = Индекс;
			ПервыйРазделитель = Разделитель;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Массив;
	Если ЗначениеЗаполнено(ПервыйРазделитель) Тогда
		Результат.Добавить(Лев(Строка, МинимальныйИндекс - 1));
		Результат.Добавить(Сред(Строка, МинимальныйИндекс + СтрДлина(ПервыйРазделитель)));
		Результат.Добавить(ПервыйРазделитель);
	Иначе
		Результат.Добавить(Строка);
		Результат.Добавить("");
		Результат.Добавить(Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура РазбитьСтрокуПоРазделителю(ИзвлекаемаяЧасть, ОстальнаяЧасть, Разделитель, Инверсия = Ложь)
	
	Индекс = СтрНайти(ОстальнаяЧасть, Разделитель);
	Если Индекс Тогда
		ИзвлекаемаяЧасть = Лев(ОстальнаяЧасть, Индекс - 1);
		ОстальнаяЧасть = Сред(ОстальнаяЧасть, Индекс + СтрДлина(Разделитель));
		Если Инверсия Тогда
			ДляОбмена = ИзвлекаемаяЧасть;
			ИзвлекаемаяЧасть = ОстальнаяЧасть;
			ОстальнаяЧасть = ДляОбмена;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция РазобратьURL(Знач URL) Экспорт

	ДопустимыеСхемы = СтрРазделить("http,https", ",");
	
	Схема = "";
	URLБезСхемы = URL;
	РазбитьСтрокуПоРазделителю(Схема, URLБезСхемы, "://");
	Если ДопустимыеСхемы.Найти(НРег(Схема)) <> Неопределено Тогда
		URL = URLБезСхемы;
	Иначе
		Схема = "";
	КонецЕсли;
	
	Путь = "";
	Результат = РазделитьПоПервомуНайденномуРазделителю(URL, СтрРазделить("/,?,#", ","));
	URL = Результат[0];
	Если ЗначениеЗаполнено(Результат[2]) Тогда
		Путь = Результат[2] + Результат[1];
	КонецЕсли;
	
	Аутентификация = Новый Структура("Пользователь, Пароль", "", "");
	АутентификацияСтрока = "";
	РазбитьСтрокуПоРазделителю(АутентификацияСтрока, URL, "@");
	Если ЗначениеЗаполнено(АутентификацияСтрока) Тогда
		АутентификацияЧасти = СтрРазделить(АутентификацияСтрока, ":");
		Аутентификация.Пользователь = АутентификацияЧасти[0];
		Аутентификация.Пароль       = АутентификацияЧасти[1];
	КонецЕсли;	

	// IPv6
	Сервер = "";
	РазбитьСтрокуПоРазделителю(Сервер, URL, "]");
	Если ЗначениеЗаполнено(Сервер) Тогда
		Сервер = Сервер + "]";
	КонецЕсли;
	
	URL = СтрЗаменить(URL, "/", "");
	
	Порт = "";
	РазбитьСтрокуПоРазделителю(Порт, URL, ":", Истина);
	
	Если Не ЗначениеЗаполнено(Сервер) Тогда
		Сервер = URL;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Порт) Тогда 
		Порт = Число(Порт);
	Иначе
		Порт = 0;	
	КонецЕсли;
	
	Фрагмент = "";
	РазбитьСтрокуПоРазделителю(Фрагмент, Путь, "#", Истина);
	
	ПараметрыЗапроса = Новый Соответствие;
	Запрос = "";
	РазбитьСтрокуПоРазделителю(Запрос, Путь, "?", Истина);
	Запрос = РаскодироватьСтроку(Запрос, СпособКодированияСтроки.URLВКодировкеURL);
	Для Каждого СтрокаКлючРавноПараметр Из СтрРазделить(Запрос, "&", Ложь) Цикл
		КлючПараметр = СтрРазделить(СтрокаКлючРавноПараметр, "=");
		Если ПараметрыЗапроса.Получить(КлючПараметр[0]) <> Неопределено Тогда
			Если ТипЗнч(КлючПараметр[1]) = Тип("Массив") Тогда
				ПараметрыЗапроса[КлючПараметр[0]].Добавить(КлючПараметр[1]);
			Иначе
				Значения = Новый Массив;
				Значения.Добавить(ПараметрыЗапроса[КлючПараметр[0]]);
				Значения.Добавить(КлючПараметр[1]);
				ПараметрыЗапроса[КлючПараметр[0]] = Значения;
			КонецЕсли;
		Иначе
			ПараметрыЗапроса.Вставить(КлючПараметр[0], КлючПараметр[1]);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(Схема) Тогда
		Схема = "http";
	КонецЕсли;
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Аутентификация", Аутентификация);
	Результат.Вставить("Сервер", Сервер);
	Результат.Вставить("Порт", Порт);
	Результат.Вставить("Путь", ?(ЗначениеЗаполнено(Путь), Путь, "/"));
	Результат.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	Результат.Вставить("Фрагмент", Фрагмент);

	Возврат Результат;
	
КонецФункции

#Область ОбработчикиСобытий

Процедура ОбработкаОтветаСКодом401(Сессия, ПодготовленныйЗапрос, Настройки, Ответ)
	
	Если ЭтоРедирект(Ответ.КодСостояния, Ответ.Заголовки) Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ.КодСостояния < 400 ИЛИ Ответ.КодСостояния >= 500 Тогда
		Возврат;
	КонецЕсли;
	
	Значение = ПолучитьЗначениеЗаголовка("www-authenticate", Ответ.Заголовки);
	Если Значение <> Ложь И СтрНайти(НРег(Значение), "digest") Тогда
		Позиция = СтрНайти(НРег(Значение), "digest");
		Значение = Сред(Значение, Позиция + СтрДлина("digest") + 1);
		Значение = СтрЗаменить(Значение, """", "");
		Значение = СтрЗаменить(Значение, Символы.ПС, "");
		
		ПараметрыDigest = Новый Структура("algorithm,realm,nonce,qop,opaque");
		Для Каждого Часть Из РазбитьСтрокуПоСтроке(Значение, ", ") Цикл
			КлючЗначение = СтрРазделить(Часть, "=");
			ПараметрыDigest.Вставить(КлючЗначение[0], КлючЗначение[1]);
		КонецЦикла;
		
		Сессия.СлужебныеДанные.ПараметрыDigest = ПараметрыDigest;
		
		ПодготовленныйЗапрос.Заголовки.Вставить("Authorization", ПодготовитьЗаголовокDigest(Сессия, ПодготовленныйЗапрос));
		ПодготовленныйЗапрос.HTTPЗапрос.Заголовки = ПодготовленныйЗапрос.Заголовки;
		
		Ответ = ОтправитьHTTPЗапрос(Сессия, ПодготовленныйЗапрос, Настройки);
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьХешФункцию(Знач Алгоритм)
	
	Алгоритм = ВРег(Алгоритм);
	Если Не ЗначениеЗаполнено(Алгоритм) ИЛИ Алгоритм = "MD5" ИЛИ Алгоритм = "MD5-SESS" Тогда
		Возврат ХешФункция.MD5;
	ИначеЕсли Алгоритм = "SHA" Тогда
		Возврат ХешФункция.SHA1;
	ИначеЕсли Алгоритм = "SHA-256" Тогда
		Возврат ХешФункция.SHA256;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьЗаголовокDigest(Сессия, ПодготовленныйЗапрос)
	
	ПараметрыDigest = Сессия.СлужебныеДанные.ПараметрыDigest;
	
	Алгоритм = ОпределитьХешФункцию(ПараметрыDigest.algorithm);
	АлгоритмСтрокой = ВРег(ПараметрыDigest.algorithm);
	Если Алгоритм = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураURL = РазобратьURL(ПодготовленныйЗапрос.URL);
	Путь = СтруктураURL.Путь;
	Если ЗначениеЗаполнено(СтруктураURL.ПараметрыЗапроса) Тогда
		Путь = Путь + "?" + КодироватьПараметрыЗапроса(СтруктураURL.ПараметрыЗапроса);
	КонецЕсли;
	
	A1 = СтрШаблон("%1:%2:%3", 
		ПодготовленныйЗапрос.Аутентификация.Пользователь,
		ПараметрыDigest.realm,
		ПодготовленныйЗапрос.Аутентификация.Пароль);
	A2 = СтрШаблон("%1:%2", ПодготовленныйЗапрос.Метод, Путь);
	
	HA1 = ХешированиеСтроки(Алгоритм, A1);
	HA2 = ХешированиеСтроки(Алгоритм, A2);
	
	Если Не ПараметрыDigest.Свойство("last_nonce") Тогда
		ПараметрыDigest.Вставить("last_nonce");
	КонецЕсли;
	
	Если ПараметрыDigest.nonce = ПараметрыDigest.last_nonce Тогда
		ПараметрыDigest.nonce_count = ПараметрыDigest.nonce_count + 1;
	Иначе
		ПараметрыDigest.Вставить("nonce_count", 1);
	КонецЕсли;
	
	ncvalue = Формат(ПараметрыDigest.nonce_count, "ЧЦ=8; ЧВН=; ЧГ=");
	cnonce = Лев(СтрЗаменить(НРег(Новый УникальныйИдентификатор), "-", ""), 16);

	Если АлгоритмСтрокой = "MD5-SESS" Тогда
		HA1 = ХешированиеСтроки(Алгоритм, СтрШаблон("%1:%2:%3", HA1, ПараметрыDigest.nonce, cnonce)); 
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыDigest.qop) Тогда
		respdig = ХешированиеСтроки(Алгоритм, СтрШаблон("%1:%2:%3", HA1, ПараметрыDigest.nonce, HA2));
	ИначеЕсли ПараметрыDigest.qop = "auth"
		ИЛИ СтрРазделить(ПараметрыDigest.qop, ",", Ложь).Найти("auth") <> Неопределено Тогда
		noncebit = СтрШаблон("%1:%2:%3:%4:%5", ПараметрыDigest.nonce, ncvalue, cnonce, "auth", HA2);
		respdig = ХешированиеСтроки(Алгоритм, СтрШаблон("%1:%2", HA1, noncebit));
	Иначе
		// INFO: auth-int не реализовано
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыDigest.last_nonce = ПараметрыDigest.nonce;

	base = СтрШаблон("username=""%1"", realm=""%2"", nonce=""%3"", uri=""%4"", response=""%5""", 
		ПодготовленныйЗапрос.Аутентификация.Пользователь,
		ПараметрыDigest.realm,
		ПараметрыDigest.nonce,
		Путь,
		respdig);
		
	Если ЗначениеЗаполнено(ПараметрыDigest.opaque) Тогда
		base = base + СтрШаблон(", opaque=""%1""", ПараметрыDigest.opaque);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыDigest.algorithm) Тогда
		base = base + СтрШаблон(", algorithm=""%1""", ПараметрыDigest.algorithm);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыDigest.qop) Тогда
		base = base + СтрШаблон(", qop=""auth"", nc=%1, cnonce=""%2""", ncvalue, cnonce);
	КонецЕсли;
	
	Возврат СтрШаблон("Digest %1", base);
	
КонецФункции

Функция ХешированиеСтроки(Алгоритм, Строка)
	
	ХешированиеДанных = Новый ХешированиеДанных(Алгоритм);
	ХешированиеДанных.Добавить(Строка);
	
	Возврат СтрЗаменить(НРег(ХешированиеДанных.ХешСумма), " ", "");
	
КонецФункции

Функция РазбитьСтрокуПоСтроке(Знач Строка, Разделитель)
	
	Результат = Новый Массив;
	Пока Истина Цикл
		Позиция = СтрНайти(Строка, Разделитель);
		Если Позиция = 0 И ЗначениеЗаполнено(Строка) Тогда
			Результат.Добавить(Строка);
			Прервать;
		КонецЕсли;
		
		ПерваяЧасть = Лев(Строка, Позиция - СтрДлина(Разделитель) + 1);
		Результат.Добавить(ПерваяЧасть);
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция РаспаковатьОтвет(Ответ)
	
	Заголовок = ПолучитьЗначениеЗаголовка("content-encoding", Ответ.Заголовки);
	Если Заголовок <> Ложь Тогда
		Если НРег(Заголовок) = "gzip" Тогда
			леGZipОбработка = леПодключаемыеОбработчики.ПодключитьОбработку("леGZipОбработка");
			Возврат леGZipОбработка.ПрочитатьGZip(Ответ.Тело);			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ответ.Тело;
	
КонецФункции

#Область ПараметрыПоУмолчанию

Функция ЗаголовкиПоУмолчанию()
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Accept-Encoding", "gzip");
	Заголовки.Вставить("Accept", "*/*");
	Заголовки.Вставить("Connection", "keep-alive");
	
	Возврат Заголовки;
	
КонецФункции

Функция МаксимальноеКоличествоПеренаправлений()
	
	Возврат 30;
	
КонецФункции

Функция СтандартныйТаймаут()
	
	Возврат 30;
	
КонецФункции

Функция ФорматыОтветов() Экспорт
	Возврат Новый Структура("Текст, JSON, ДвоичныеДанные", "Текст", "JSON", "ДвоичныеДанные");
КонецФункции
#КонецОбласти

#КонецОбласти

ФорматОтвета = ФорматыОтветов().Текст;
Таймаут      = СтандартныйТаймаут();
ПроверятьSSL = Ложь;

Заголовки = Новый Соответствие;
Файлы     = Новый Массив;
ОтветСервера = Новый Структура;